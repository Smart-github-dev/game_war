{"version":3,"file":"pixi-sound.js","sources":["../node_modules/promise-polyfill/src/index.js","../node_modules/promise-polyfill/src/finally.js","../src/Filterable.ts","../src/filters/Filter.ts","../src/instance.ts","../src/webaudio/WebAudioUtils.ts","../src/webaudio/WebAudioInstance.ts","../src/webaudio/WebAudioNodes.ts","../src/webaudio/WebAudioMedia.ts","../src/webaudio/WebAudioContext.ts","../src/filters/EqualizerFilter.ts","../src/filters/DistortionFilter.ts","../src/filters/StereoFilter.ts","../src/filters/ReverbFilter.ts","../src/filters/MonoFilter.ts","../src/filters/TelephoneFilter.ts","../src/htmlaudio/HTMLAudioInstance.ts","../src/htmlaudio/HTMLAudioMedia.ts","../src/htmlaudio/HTMLAudioContext.ts","../src/utils/supported.ts","../src/utils/resolveUrl.ts","../src/loader/LoaderMiddleware.ts","../src/loader/Loader.ts","../src/sprites/SoundSprite.ts","../src/Sound.ts","../src/SoundLibrary.ts","../src/utils/playOnce.ts","../src/utils/render.ts","../src/utils/sineTone.ts","../src/index.ts"],"sourcesContent":["import promiseFinally from './finally';\n\n// Store setTimeout reference so promise-polyfill will be unaffected by\n// other code modifying setTimeout (like sinon.useFakeTimers())\nvar setTimeoutFunc = setTimeout;\n\nfunction noop() {}\n\n// Polyfill for Function.prototype.bind\nfunction bind(fn, thisArg) {\n  return function() {\n    fn.apply(thisArg, arguments);\n  };\n}\n\n/**\n * @constructor\n * @param {Function} fn\n */\nfunction Promise(fn) {\n  if (!(this instanceof Promise))\n    throw new TypeError('Promises must be constructed via new');\n  if (typeof fn !== 'function') throw new TypeError('not a function');\n  /** @type {!number} */\n  this._state = 0;\n  /** @type {!boolean} */\n  this._handled = false;\n  /** @type {Promise|undefined} */\n  this._value = undefined;\n  /** @type {!Array<!Function>} */\n  this._deferreds = [];\n\n  doResolve(fn, this);\n}\n\nfunction handle(self, deferred) {\n  while (self._state === 3) {\n    self = self._value;\n  }\n  if (self._state === 0) {\n    self._deferreds.push(deferred);\n    return;\n  }\n  self._handled = true;\n  Promise._immediateFn(function() {\n    var cb = self._state === 1 ? deferred.onFulfilled : deferred.onRejected;\n    if (cb === null) {\n      (self._state === 1 ? resolve : reject)(deferred.promise, self._value);\n      return;\n    }\n    var ret;\n    try {\n      ret = cb(self._value);\n    } catch (e) {\n      reject(deferred.promise, e);\n      return;\n    }\n    resolve(deferred.promise, ret);\n  });\n}\n\nfunction resolve(self, newValue) {\n  try {\n    // Promise Resolution Procedure: https://github.com/promises-aplus/promises-spec#the-promise-resolution-procedure\n    if (newValue === self)\n      throw new TypeError('A promise cannot be resolved with itself.');\n    if (\n      newValue &&\n      (typeof newValue === 'object' || typeof newValue === 'function')\n    ) {\n      var then = newValue.then;\n      if (newValue instanceof Promise) {\n        self._state = 3;\n        self._value = newValue;\n        finale(self);\n        return;\n      } else if (typeof then === 'function') {\n        doResolve(bind(then, newValue), self);\n        return;\n      }\n    }\n    self._state = 1;\n    self._value = newValue;\n    finale(self);\n  } catch (e) {\n    reject(self, e);\n  }\n}\n\nfunction reject(self, newValue) {\n  self._state = 2;\n  self._value = newValue;\n  finale(self);\n}\n\nfunction finale(self) {\n  if (self._state === 2 && self._deferreds.length === 0) {\n    Promise._immediateFn(function() {\n      if (!self._handled) {\n        Promise._unhandledRejectionFn(self._value);\n      }\n    });\n  }\n\n  for (var i = 0, len = self._deferreds.length; i < len; i++) {\n    handle(self, self._deferreds[i]);\n  }\n  self._deferreds = null;\n}\n\n/**\n * @constructor\n */\nfunction Handler(onFulfilled, onRejected, promise) {\n  this.onFulfilled = typeof onFulfilled === 'function' ? onFulfilled : null;\n  this.onRejected = typeof onRejected === 'function' ? onRejected : null;\n  this.promise = promise;\n}\n\n/**\n * Take a potentially misbehaving resolver function and make sure\n * onFulfilled and onRejected are only called once.\n *\n * Makes no guarantees about asynchrony.\n */\nfunction doResolve(fn, self) {\n  var done = false;\n  try {\n    fn(\n      function(value) {\n        if (done) return;\n        done = true;\n        resolve(self, value);\n      },\n      function(reason) {\n        if (done) return;\n        done = true;\n        reject(self, reason);\n      }\n    );\n  } catch (ex) {\n    if (done) return;\n    done = true;\n    reject(self, ex);\n  }\n}\n\nPromise.prototype['catch'] = function(onRejected) {\n  return this.then(null, onRejected);\n};\n\nPromise.prototype.then = function(onFulfilled, onRejected) {\n  // @ts-ignore\n  var prom = new this.constructor(noop);\n\n  handle(this, new Handler(onFulfilled, onRejected, prom));\n  return prom;\n};\n\nPromise.prototype['finally'] = promiseFinally;\n\nPromise.all = function(arr) {\n  return new Promise(function(resolve, reject) {\n    if (!arr || typeof arr.length === 'undefined')\n      throw new TypeError('Promise.all accepts an array');\n    var args = Array.prototype.slice.call(arr);\n    if (args.length === 0) return resolve([]);\n    var remaining = args.length;\n\n    function res(i, val) {\n      try {\n        if (val && (typeof val === 'object' || typeof val === 'function')) {\n          var then = val.then;\n          if (typeof then === 'function') {\n            then.call(\n              val,\n              function(val) {\n                res(i, val);\n              },\n              reject\n            );\n            return;\n          }\n        }\n        args[i] = val;\n        if (--remaining === 0) {\n          resolve(args);\n        }\n      } catch (ex) {\n        reject(ex);\n      }\n    }\n\n    for (var i = 0; i < args.length; i++) {\n      res(i, args[i]);\n    }\n  });\n};\n\nPromise.resolve = function(value) {\n  if (value && typeof value === 'object' && value.constructor === Promise) {\n    return value;\n  }\n\n  return new Promise(function(resolve) {\n    resolve(value);\n  });\n};\n\nPromise.reject = function(value) {\n  return new Promise(function(resolve, reject) {\n    reject(value);\n  });\n};\n\nPromise.race = function(values) {\n  return new Promise(function(resolve, reject) {\n    for (var i = 0, len = values.length; i < len; i++) {\n      values[i].then(resolve, reject);\n    }\n  });\n};\n\n// Use polyfill for setImmediate for performance gains\nPromise._immediateFn =\n  (typeof setImmediate === 'function' &&\n    function(fn) {\n      setImmediate(fn);\n    }) ||\n  function(fn) {\n    setTimeoutFunc(fn, 0);\n  };\n\nPromise._unhandledRejectionFn = function _unhandledRejectionFn(err) {\n  if (typeof console !== 'undefined' && console) {\n    console.warn('Possible Unhandled Promise Rejection:', err); // eslint-disable-line no-console\n  }\n};\n\nexport default Promise;\n","/**\n * @this {Promise}\n */\nfunction finallyConstructor(callback) {\n  var constructor = this.constructor;\n  return this.then(\n    function(value) {\n      return constructor.resolve(callback()).then(function() {\n        return value;\n      });\n    },\n    function(reason) {\n      return constructor.resolve(callback()).then(function() {\n        return constructor.reject(reason);\n      });\n    }\n  );\n}\n\nexport default finallyConstructor;\n","import { Filter } from \"./filters/Filter\";\n\n/**\n * Abstract class which SoundNodes and SoundContext\n * both extend. This provides the functionality for adding\n * dynamic filters.\n * @class Filterable\n * @memberof PIXI.sound\n * @param {AudioNode} source The source audio node\n * @param {AudioNode} destination The output audio node\n * @private\n */\nexport class Filterable\n{\n    /**\n     * Get the gain node\n     * @name PIXI.sound.Filterable#_input\n     * @type {AudioNode}\n     * @private\n     */\n    private _input: AudioNode;\n\n    /**\n     * The destination output audio node\n     * @name PIXI.sound.Filterable#_output\n     * @type {AudioNode}\n     * @private\n     */\n    private _output: AudioNode;\n\n    /**\n     * Collection of filters.\n     * @name PIXI.sound.Filterable#_filters\n     * @type {PIXI.sound.filters.Filter[]}\n     * @private\n     */\n    private _filters: Filter[];\n\n    constructor(input: AudioNode, output: AudioNode)\n    {\n        this._output = output;\n        this._input = input;\n    }\n\n    /**\n     * The destination output audio node\n     * @name PIXI.sound.Filterable#destination\n     * @type {AudioNode}\n     * @readonly\n     */\n    get destination(): AudioNode\n    {\n        return this._input;\n    }\n\n    /**\n     * The collection of filters\n     * @name PIXI.sound.Filterable#filters\n     * @type {PIXI.sound.filters.Filter[]}\n     */\n    get filters(): Filter[]\n    {\n        return this._filters;\n    }\n    set filters(filters: Filter[])\n    {\n        if (this._filters)\n        {\n            this._filters.forEach((filter: Filter) => {\n                if (filter)\n                {\n                    filter.disconnect();\n                }\n            });\n            this._filters = null;\n            // Reconnect direct path\n            this._input.connect(this._output);\n        }\n\n        if (filters && filters.length)\n        {\n            this._filters = filters.slice(0);\n\n            // Disconnect direct path before inserting filters\n            this._input.disconnect();\n\n            // Connect each filter\n            let prevFilter: Filter = null;\n            filters.forEach((filter: Filter) => {\n                if (prevFilter === null)\n                {\n                    // first filter is the destination\n                    // for the analyser\n                    this._input.connect(filter.destination);\n                }\n                else\n                {\n                    prevFilter.connect(filter.destination);\n                }\n                prevFilter = filter;\n            });\n            prevFilter.connect(this._output);\n        }\n    }\n\n    /**\n     * Cleans up.\n     * @method PIXI.sound.Filterable#destroy\n     */\n    public destroy(): void\n    {\n        this.filters = null;\n        this._input = null;\n        this._output = null;\n    }\n}\n","/**\n * Represents a single sound element. Can be used to play, pause, etc. sound instances.\n *\n * @class Filter\n * @memberof PIXI.sound.filters\n * @param {AudioNode} destination The audio node to use as the destination for the input AudioNode\n * @param {AudioNode} [source] Optional output node, defaults to destination node. This is useful\n *        when creating filters which contains multiple AudioNode elements chained together.\n */\nexport class Filter\n{\n    /**\n     * The node to connect for the filter to the previous filter.\n     * @name PIXI.sound.filters.Filter#destination\n     * @type {AudioNode}\n     */\n    public destination: AudioNode;\n\n    /**\n     * The node to connect for the filter to the previous filter.\n     * @name PIXI.sound.filters.Filter#source\n     * @type {AudioNode}\n     */\n    public source: AudioNode;\n\n    constructor(destination: AudioNode, source?: AudioNode)\n    {\n        this.init(destination, source);\n    }\n\n    /**\n     * Reinitialize\n     * @method PIXI.sound.filters.Filter#init\n     * @private\n     */\n    protected init(destination: AudioNode, source?: AudioNode)\n    {\n        this.destination = destination;\n        this.source = source || destination;\n    }\n\n    /**\n     * Connect to the destination.\n     * @method PIXI.sound.filters.Filter#connect\n     * @param {AudioNode} destination The destination node to connect the output to\n     */\n    public connect(destination: AudioNode): void\n    {\n        this.source.connect(destination);\n    }\n\n    /**\n     * Completely disconnect filter from destination and source nodes.\n     * @method PIXI.sound.filters.Filter#disconnect\n     */\n    public disconnect(): void\n    {\n        this.source.disconnect();\n    }\n\n    /**\n     * Destroy the filter and don't use after this.\n     * @method PIXI.sound.filters.Filter#destroy\n     */\n    public destroy(): void\n    {\n        this.disconnect();\n        this.destination = null;\n        this.source = null;\n    }\n}\n","import { SoundLibrary } from \"./SoundLibrary\";\n\n/**\n * Singletone instance of the SoundLibrary\n * @private\n */\nexport let instance: SoundLibrary;\n\n/**\n * Internal set function for the singleton instance.\n * @private\n * @param {PIXI.sound} sound - Sound library instance\n * @return {PIXI.sound}\n */\nexport function setInstance(sound: SoundLibrary) {\n    instance = sound;\n    return sound;\n}\n\n/**\n * Internal get function for the singleton instance.\n * @private\n * @return {PIXI.sound}\n */\nexport function getInstance(): SoundLibrary {\n    return instance;\n}\n","import { getInstance } from \"../instance\";\nimport { WebAudioContext } from \"./WebAudioContext\";\n\n/**\n * Internal class for Web Audio abstractions and convenience methods.\n * @private\n * @class WebAudioUtils\n * @memberof PIXI.sound.webaudio\n */\nexport class WebAudioUtils\n{\n    /**\n     * Dezippering is removed in the future Web Audio API, instead\n     * we use the `setValueAtTime` method, however, this is not available\n     * in all environments (e.g., Android webview), so we fallback to the `value` setter.\n     * @method PIXI.sound.webaudio.WebAudioUtils.setParamValue\n     * @private\n     * @param {AudioParam} param - AudioNode parameter object\n     * @param {number} value - Value to set\n     * @return {number} The value set\n     */\n    public static setParamValue(param: AudioParam, value: number): number\n    {\n        if (param.setValueAtTime)\n        {\n            const context = getInstance().context as WebAudioContext;\n            param.setValueAtTime(value, context.audioContext.currentTime);\n        }\n        else\n        {\n            param.value = value;\n        }\n        return value;\n    }\n}\n","import { IMediaInstance } from \"../interfaces\";\nimport { PlayOptions } from \"../Sound\";\nimport { WebAudioMedia } from \"./WebAudioMedia\";\nimport { WebAudioUtils } from \"./WebAudioUtils\";\n\nlet id = 0;\n\n/**\n * A single play instance that handles the AudioBufferSourceNode.\n * @private\n * @class WebAudioInstance\n * @memberof PIXI.sound.webaudio\n * @param {SoundNodes} source Reference to the SoundNodes.\n */\nexport class WebAudioInstance extends PIXI.utils.EventEmitter implements IMediaInstance\n{\n    /**\n     * The current unique ID for this instance.\n     * @name PIXI.sound.webaudio.WebAudioInstance#id\n     * @readonly\n     */\n    public id: number;\n\n    /**\n     * The source Sound.\n     * @type {PIXI.sound.webaudio.WebAudioMedia}\n     * @name PIXI.sound.webaudio.WebAudioInstance#_media\n     * @private\n     */\n    private _media: WebAudioMedia;\n\n    /**\n     * true if paused.\n     * @type {boolean}\n     * @name PIXI.sound.webaudio.WebAudioInstance#_paused\n     * @private\n     */\n    private _paused: boolean;\n\n    /**\n     * true if muted.\n     * @type {boolean}\n     * @name PIXI.sound.webaudio.WebAudioInstance#_muted\n     * @private\n     */\n    private _muted: boolean;\n\n    /**\n     * true if paused.\n     * @type {boolean}\n     * @name PIXI.sound.webaudio.WebAudioInstance#_pausedReal\n     * @private\n     */\n    private _pausedReal: boolean;\n\n    /**\n     * The instance volume\n     * @type {number}\n     * @name PIXI.sound.webaudio.WebAudioInstance#_volume\n     * @private\n     */\n    private _volume: number;\n\n    /**\n     * Last update frame number.\n     * @type {number}\n     * @name PIXI.sound.webaudio.WebAudioInstance#_lastUpdate\n     * @private\n     */\n    private _lastUpdate: number;\n\n    /**\n     * The total number of seconds elapsed in playback.\n     * @type {number}\n     * @name PIXI.sound.webaudio.WebAudioInstance#_elapsed\n     * @private\n     */\n    private _elapsed: number;\n\n    /**\n     * Playback rate, where 1 is 100%.\n     * @type {number}\n     * @name PIXI.sound.webaudio.WebAudioInstance#_speed\n     * @private\n     */\n    private _speed: number;\n\n    /**\n     * Playback rate, where 1 is 100%.\n     * @type {number}\n     * @name PIXI.sound.webaudio.WebAudioInstance#_end\n     * @private\n     */\n    private _end: number;\n\n    /**\n     * The number of seconds to wait before starting playback\n     * @type {number}\n     * @name PIXI.sound.webaudio.WebAudioInstance#_wait\n     * @private\n     */\n    private _wait: number;\n\n    /**\n     * `true` if should be looping.\n     * @type {boolean}\n     * @name PIXI.sound.webaudio.WebAudioInstance#_loop\n     * @private\n     */\n    private _loop: boolean;\n\n    /**\n     * Gain node for controlling volume of instance\n     * @type {GainNode}\n     * @name PIXI.sound.webaudio.WebAudioInstance#_gain\n     * @private\n     */\n    private _gain: GainNode;\n\n    /**\n     * Length of the sound in seconds.\n     * @type {number}\n     * @name PIXI.sound.webaudio.WebAudioInstance#_duration\n     * @private\n     */\n    private _duration: number;\n\n    /**\n     * The progress of the sound from 0 to 1.\n     * @type {number}\n     * @name PIXI.sound.webaudio.WebAudioInstance#_progress\n     * @private\n     */\n    private _progress: number;\n\n    /**\n     * Audio buffer source clone from Sound object.\n     * @type {AudioBufferSourceNode}\n     * @name PIXI.sound.webaudio.WebAudioInstance#_source\n     * @private\n     */\n    private _source: AudioBufferSourceNode;\n\n    constructor(media: WebAudioMedia)\n    {\n        super();\n\n        this.id = id++;\n        this._media = null;\n        this._paused = false;\n        this._muted = false;\n        this._elapsed = 0;\n\n        // Initialize\n        this.init(media);\n    }\n\n    /**\n     * Stops the instance, don't use after this.\n     * @method PIXI.sound.webaudio.WebAudioInstance#stop\n     */\n    public stop(): void\n    {\n        if (this._source)\n        {\n            this._internalStop();\n\n            /**\n             * The sound is stopped. Don't use after this is called.\n             * @event PIXI.sound.webaudio.WebAudioInstance#stop\n             */\n            this.emit(\"stop\");\n        }\n    }\n\n    /**\n     * Set the instance speed from 0 to 1\n     * @member {number} PIXI.sound.htmlaudio.HTMLAudioInstance#speed\n     */\n    public get speed(): number\n    {\n        return this._speed;\n    }\n    public set speed(speed: number)\n    {\n        this._speed = speed;\n        this.refresh();\n        this._update(true); // update progress\n    }\n\n    /**\n     * Get the set the volume for this instance from 0 to 1\n     * @member {number} PIXI.sound.htmlaudio.HTMLAudioInstance#volume\n     */\n    public get volume(): number\n    {\n        return this._volume;\n    }\n    public set volume(volume: number)\n    {\n        this._volume = volume;\n        this.refresh();\n    }\n\n    /**\n     * `true` if the sound is muted\n     * @member {boolean} PIXI.sound.htmlaudio.HTMLAudioInstance#muted\n     */\n    public get muted(): boolean\n    {\n        return this._muted;\n    }\n    public set muted(muted: boolean)\n    {\n        this._muted = muted;\n        this.refresh();\n    }\n\n    /**\n     * If the sound instance should loop playback\n     * @member {boolean} PIXI.sound.htmlaudio.HTMLAudioInstance#loop\n     */\n    public get loop(): boolean\n    {\n        return this._loop;\n    }\n    public set loop(loop: boolean)\n    {\n        this._loop = loop;\n        this.refresh();\n    }\n\n    /**\n     * Refresh loop, volume and speed based on changes to parent\n     * @method PIXI.sound.webaudio.WebAudioInstance#refresh\n     */\n    public refresh(): void\n    {\n        // Sound could be paused\n        if (!this._source) {\n            return;\n        }\n        const global = this._media.context;\n        const sound = this._media.parent;\n\n        // Updating looping\n        this._source.loop = this._loop || sound.loop;\n\n        // Update the volume\n        const globalVolume = global.volume * (global.muted ? 0 : 1);\n        const soundVolume = sound.volume * (sound.muted ? 0 : 1);\n        const instanceVolume = this._volume * (this._muted ? 0 : 1);\n        WebAudioUtils.setParamValue(this._gain.gain, instanceVolume * soundVolume * globalVolume);\n\n        // Update the speed\n        WebAudioUtils.setParamValue(this._source.playbackRate, this._speed * sound.speed * global.speed);\n    }\n\n    /**\n     * Handle changes in paused state, either globally or sound or instance\n     * @method PIXI.sound.webaudio.WebAudioInstance#refreshPaused\n     */\n    public refreshPaused(): void\n    {\n        const global = this._media.context;\n        const sound = this._media.parent;\n\n        // Consider global and sound paused\n        const pausedReal = this._paused || sound.paused || global.paused;\n\n        if (pausedReal !== this._pausedReal)\n        {\n            this._pausedReal = pausedReal;\n\n            if (pausedReal)\n            {\n                // pause the sounds\n                this._internalStop();\n\n                /**\n                 * The sound is paused.\n                 * @event PIXI.sound.webaudio.WebAudioInstance#paused\n                 */\n                this.emit(\"paused\");\n            }\n            else\n            {\n                /**\n                 * The sound is unpaused.\n                 * @event PIXI.sound.webaudio.WebAudioInstance#resumed\n                 */\n                this.emit(\"resumed\");\n\n                // resume the playing with offset\n                this.play({\n                    wait: this._elapsed < this._wait ? this._wait - this._elapsed : 0,\n                    start: Math.max(this._elapsed - this._wait, 0) % this._duration,\n                    end: this._end,\n                    speed: this._speed,\n                    loop: this._loop,\n                    volume: this._volume,\n                });\n            }\n\n            /**\n             * The sound is paused or unpaused.\n             * @event PIXI.sound.webaudio.WebAudioInstance#pause\n             * @property {boolean} paused If the instance was paused or not.\n             */\n            this.emit(\"pause\", pausedReal);\n        }\n    }\n\n    /**\n     * Plays the sound.\n     * @method PIXI.sound.webaudio.WebAudioInstance#play\n     * @param {Object} options Play options\n     * @param {number} options.start The position to start playing, in seconds.\n     * @param {number} options.end The ending position in seconds.\n     * @param {number} options.speed Speed for the instance\n     * @param {boolean} options.loop If the instance is looping, defaults to sound loop\n     * @param {number} options.volume Volume of the instance\n     * @param {boolean} options.muted Muted state of instance\n     * @param {number} options.wait Delay in seconds before starting playback\n     */\n    public play(options: PlayOptions): void\n    {\n        const {start, end, speed, loop, volume, muted, wait} = options;\n\n        if (end)\n        {\n            console.assert(end > start, \"End time is before start time\");\n        }\n        this._paused = false;\n        const {source, gain} = this._media.nodes.cloneBufferSource();\n\n        this._source = source;\n        this._gain = gain;\n        this._speed = speed;\n        this._volume = volume;\n        this._loop = !!loop;\n        this._muted = muted;\n        this._wait = wait || 0;\n        this.refresh();\n\n        const duration: number = this._source.buffer.duration;\n        this._duration = duration;\n        this._end = end;\n        this._lastUpdate = this._now();\n        this._elapsed = start;\n        this._source.onended = this._onComplete.bind(this);\n        const when = wait ? this._now() + wait : 0;\n\n        if (this._loop)\n        {\n            this._source.loopEnd = end;\n            this._source.loopStart = start;\n            this._source.start(when, start);\n        }\n        else if (end)\n        {\n            this._source.start(when, start, end - start);\n        }\n        else\n        {\n            this._source.start(when, start);\n        }\n\n        /**\n         * The sound is started.\n         * @event PIXI.sound.webaudio.WebAudioInstance#start\n         */\n        this.emit(\"start\");\n\n        // Do an update for the initial progress\n        this._update(true);\n\n        // Start handling internal ticks\n        this._enabled = true;\n    }\n\n    /**\n     * Utility to convert time in millseconds or seconds\n     * @method PIXI.sound.webaudio.WebAudioInstance#_toSec\n     * @private\n     * @param {number} [time] Time in either ms or sec\n     * @return {number} Time in seconds\n     */\n    private _toSec(time?: number): number\n    {\n        if (time > 10)\n        {\n            time /= 1000;\n        }\n        return time || 0;\n    }\n\n    /**\n     * Start the update progress.\n     * @name PIXI.sound.webaudio.WebAudioInstance#_enabled\n     * @type {boolean}\n     * @private\n     */\n    private set _enabled(enabled: boolean)\n    {\n        PIXI.ticker.shared.remove(this._updateListener, this);\n        if (enabled)\n        {\n            PIXI.ticker.shared.add(this._updateListener, this);\n        }\n    }\n\n    /**\n     * The current playback progress from 0 to 1.\n     * @type {number}\n     * @name PIXI.sound.webaudio.WebAudioInstance#progress\n     */\n    public get progress(): number\n    {\n        return this._progress;\n    }\n\n    /**\n     * Pauses the sound.\n     * @type {boolean}\n     * @name PIXI.sound.webaudio.WebAudioInstance#paused\n     */\n    public get paused(): boolean\n    {\n        return this._paused;\n    }\n\n    public set paused(paused: boolean)\n    {\n        this._paused = paused;\n        this.refreshPaused();\n    }\n\n    /**\n     * Don't use after this.\n     * @method PIXI.sound.webaudio.WebAudioInstance#destroy\n     */\n    public destroy(): void\n    {\n        this.removeAllListeners();\n        this._internalStop();\n        if (this._source)\n        {\n            this._source.disconnect();\n            this._source = null;\n        }\n        if (this._gain)\n        {\n            this._gain.disconnect();\n            this._gain = null;\n        }\n        if (this._media)\n        {\n            this._media.context.events.off(\"refresh\", this.refresh, this);\n            this._media.context.events.off(\"refreshPaused\", this.refreshPaused, this);\n            this._media = null;\n        }\n        this._end = null;\n        this._speed = 1;\n        this._volume = 1;\n        this._loop = false;\n        this._elapsed = 0;\n        this._duration = 0;\n        this._wait = 0;\n        this._paused = false;\n        this._muted = false;\n        this._pausedReal = false;\n    }\n\n    /**\n     * To string method for instance.\n     * @method PIXI.sound.webaudio.WebAudioInstance#toString\n     * @return {string} The string representation of instance.\n     * @private\n     */\n    public toString(): string\n    {\n        return \"[WebAudioInstance id=\" + this.id + \"]\";\n    }\n\n    /**\n     * Get the current time in seconds.\n     * @method PIXI.sound.webaudio.WebAudioInstance#_now\n     * @private\n     * @return {number} Seconds since start of context\n     */\n    private _now(): number\n    {\n        return this._media.context.audioContext.currentTime;\n    }\n\n    /**\n     * Callback for update listener\n     * @type {Function}\n     * @name PIXI.sound.webaudio.WebAudioInstance#_updateListener\n     * @private\n     */\n    private _updateListener() {\n        this._update();\n    }\n\n    /**\n     * Internal update the progress.\n     * @method PIXI.sound.webaudio.WebAudioInstance#_update\n     * @private\n     */\n    private _update(force: boolean = false): void\n    {\n        if (this._source)\n        {\n            const now: number = this._now();\n            const delta: number = now - this._lastUpdate;\n\n            if (delta > 0 || force)\n            {\n                const speed: number = this._source.playbackRate.value;\n                this._elapsed += delta * speed;\n                this._lastUpdate = now;\n                const duration: number = this._duration;\n                let progress: number;\n                if (this._source.loopStart)\n                {\n                    const soundLength = this._source.loopEnd - this._source.loopStart;\n                    progress = (this._source.loopStart + this._elapsed % soundLength) / duration;\n                }\n                else\n                {\n                    progress = (this._elapsed % duration) / duration;\n                }\n\n                // Update the progress\n                this._progress = progress;\n\n                /**\n                 * The sound progress is updated.\n                 * @event PIXI.sound.webaudio.WebAudioInstance#progress\n                 * @property {number} progress Amount progressed from 0 to 1\n                 * @property {number} duration The total playback in seconds\n                 */\n                this.emit(\"progress\", this._progress, duration);\n            }\n        }\n    }\n\n    /**\n     * Initializes the instance.\n     * @method PIXI.sound.webaudio.WebAudioInstance#init\n     */\n    public init(media: WebAudioMedia): void\n    {\n        this._media = media;\n        media.context.events.on(\"refresh\", this.refresh, this);\n        media.context.events.on(\"refreshPaused\", this.refreshPaused, this);\n    }\n\n    /**\n     * Stops the instance.\n     * @method PIXI.sound.webaudio.WebAudioInstance#_internalStop\n     * @private\n     */\n    private _internalStop(): void\n    {\n        if (this._source)\n        {\n            this._enabled = false;\n            this._source.onended = null;\n            this._source.stop(0); // param needed for iOS 8 bug\n            this._source.disconnect();\n            this._source.buffer = null;\n            this._source = null;\n        }\n    }\n\n    /**\n     * Callback when completed.\n     * @method PIXI.sound.webaudio.WebAudioInstance#_onComplete\n     * @private\n     */\n    private _onComplete(): void\n    {\n        if (this._source)\n        {\n            this._enabled = false;\n            this._source.onended = null;\n            this._source.disconnect();\n            this._source.buffer = null;\n        }\n        this._source = null;\n        this._progress = 1;\n        this.emit(\"progress\", 1, this._duration);\n        /**\n         * The sound ends, don't use after this\n         * @event PIXI.sound.webaudio.WebAudioInstance#end\n         */\n        this.emit(\"end\", this);\n    }\n}\n","import { Filterable } from \"../Filterable\";\nimport { Filter } from \"../filters/Filter\";\nimport { WebAudioContext } from \"./WebAudioContext\";\nimport { WebAudioUtils } from \"./WebAudioUtils\";\n\n/**\n * Output for cloneing node\n * @interface PIXI.sound.SoundNodes~SourceClone\n * @property {AudioBufferSourceNode} source Cloned audio buffer source\n * @property {GainNode} gain Independent volume control\n */\nexport interface SourceClone {\n    source: AudioBufferSourceNode;\n    gain: GainNode;\n}\n\n/**\n * @private\n * @class WebAudioNodes\n * @extends PIXI.sound.Filterable\n * @private\n * @memberof PIXI.sound.webaudio\n * @param {PIXI.sound.webaudio.WebAudioContext} audioContext The audio context.\n */\nexport class WebAudioNodes extends Filterable\n{\n    /**\n     * The buffer size for script processor, default is `0` which auto-detects. If you plan to use\n     * script node on iOS, you'll need to provide a non-zero amount.\n     * @name PIXI.sound.SoundNodes.BUFFER_SIZE\n     * @type {number}\n     * @default 0\n     */\n    public static BUFFER_SIZE: number = 0;\n\n    /**\n     * Get the buffer source node\n     * @name PIXI.sound.SoundNodes#bufferSource\n     * @type {AudioBufferSourceNode}\n     * @readonly\n     */\n    public bufferSource: AudioBufferSourceNode;\n\n    /**\n     * Get the gain node\n     * @name PIXI.sound.SoundNodes#gain\n     * @type {GainNode}\n     * @readonly\n     */\n    public gain: GainNode;\n\n    /**\n     * Get the analyser node\n     * @name PIXI.sound.SoundNodes#analyser\n     * @type {AnalyserNode}\n     * @readonly\n     */\n    public analyser: AnalyserNode;\n\n    /**\n     * Reference to the SoundContext\n     * @name PIXI.sound.SoundNodes#context\n     * @type {PIXI.sound.webaudio.WebAudioContext}\n     * @readonly\n     */\n    public context: WebAudioContext;\n\n    /**\n     * Private reference to the script processor node.\n     * @name PIXI.sound.SoundNodes#_script\n     * @type {ScriptProcessorNode}\n     */\n    private _script: ScriptProcessorNode;\n\n    constructor(context: WebAudioContext)\n    {\n        const audioContext: AudioContext = context.audioContext;\n\n        const bufferSource: AudioBufferSourceNode = audioContext.createBufferSource();\n        const gain: GainNode = audioContext.createGain();\n        const analyser: AnalyserNode = audioContext.createAnalyser();\n\n        bufferSource.connect(analyser);\n        analyser.connect(gain);\n        gain.connect(context.destination);\n\n        super(analyser, gain);\n\n        this.context = context;\n        this.bufferSource = bufferSource;\n        this.gain = gain;\n        this.analyser = analyser;\n    }\n\n    /**\n     * Get the script processor node.\n     * @name PIXI.sound.SoundNodes#script\n     * @type {ScriptProcessorNode}\n     * @readonly\n     */\n    public get script()\n    {\n        if (!this._script)\n        {\n            this._script = this.context.audioContext.createScriptProcessor(WebAudioNodes.BUFFER_SIZE);\n            this._script.connect(this.context.destination);\n        }\n        return this._script;\n    }\n\n    /**\n     * Cleans up.\n     * @method PIXI.sound.SoundNodes#destroy\n     */\n    public destroy(): void\n    {\n        super.destroy();\n\n        this.bufferSource.disconnect();\n        if (this._script)\n        {\n            this._script.disconnect();\n        }\n        this.gain.disconnect();\n        this.analyser.disconnect();\n\n        this.bufferSource = null;\n        this._script = null;\n        this.gain = null;\n        this.analyser = null;\n\n        this.context = null;\n    }\n\n    /**\n     * Clones the bufferSource. Used just before playing a sound.\n     * @method PIXI.sound.SoundNodes#cloneBufferSource\n     * @returns {PIXI.sound.SoundNodes~SourceClone} The clone AudioBufferSourceNode.\n     */\n    public cloneBufferSource(): SourceClone\n    {\n        const orig: AudioBufferSourceNode = this.bufferSource;\n        const source: AudioBufferSourceNode = this.context.audioContext.createBufferSource();\n        source.buffer = orig.buffer;\n        WebAudioUtils.setParamValue(source.playbackRate, orig.playbackRate.value);\n        source.loop = orig.loop;\n\n        const gain: GainNode = this.context.audioContext.createGain();\n        source.connect(gain);\n        gain.connect(this.destination);\n        return { source, gain };\n    }\n\n    /**\n     * Get buffer size of `ScriptProcessorNode`.\n     * @type {number}\n     * @readonly\n     */\n    get bufferSize(): number\n    {\n        return this.script.bufferSize;\n    }\n}\n","import * as path from \"path\";\nimport { Filter } from \"../filters\";\nimport { IMedia } from \"../interfaces\";\nimport { CompleteCallback, LoadedCallback, Options, PlayOptions, Sound } from \"../Sound\";\nimport { SoundSprite, SoundSpriteData, SoundSprites } from \"../sprites\";\nimport { WebAudioContext } from \"./WebAudioContext\";\nimport { WebAudioInstance } from \"./WebAudioInstance\";\nimport { WebAudioNodes } from \"./WebAudioNodes\";\n\n/**\n * Represents a single sound element. Can be used to play, pause, etc. sound instances.\n * @private\n * @class WebAudioMedia\n * @memberof PIXI.sound.webaudio\n * @param {PIXI.sound.Sound} parent - Instance of parent Sound container\n */\nexport class WebAudioMedia implements IMedia\n{\n    /**\n     * Reference to the parent Sound container.\n     * @name PIXI.sound.webaudio.WebAudioMedia#parent\n     * @type {PIXI.sound.Sound}\n     * @readonly\n     */\n    public parent: Sound;\n\n    /**\n     * The file buffer to load.\n     * @name PIXI.sound.webaudio.WebAudioMedia#source\n     * @type {ArrayBuffer}\n     * @readonly\n     */\n    public source: ArrayBuffer;\n\n    /**\n     * Instance of the chain builder.\n     * @name PIXI.sound.webaudio.WebAudioMedia#_nodes\n     * @type {PIXI.sound.webaudio.WebAudioNodes}\n     * @private\n     */\n    private _nodes: WebAudioNodes;\n\n    /**\n     * Instance of the source node.\n     * @name PIXI.sound.webaudio.WebAudioMedia#_source\n     * @type {AudioBufferSourceNode}\n     * @private\n     */\n    private _source: AudioBufferSourceNode;\n\n    public init(parent: Sound): void\n    {\n        this.parent = parent;\n        this._nodes = new WebAudioNodes(this.context);\n        this._source = this._nodes.bufferSource;\n        this.source = parent.options.source as ArrayBuffer;\n    }\n\n    /**\n     * Destructor, safer to use `SoundLibrary.remove(alias)` to remove this sound.\n     * @private\n     * @method PIXI.sound.webaudio.WebAudioMedia#destroy\n     */\n    public destroy(): void\n    {\n        this.parent = null;\n        this._nodes.destroy();\n        this._nodes = null;\n        this._source.buffer = null;\n        this._source = null;\n        this.source = null;\n    }\n\n    // Implement create\n    public create(): WebAudioInstance\n    {\n        return new WebAudioInstance(this);\n    }\n\n    // Implement context\n    public get context(): WebAudioContext\n    {\n        return this.parent.context as WebAudioContext;\n    }\n\n    // Implement isPlayable\n    public get isPlayable(): boolean\n    {\n        return !!this._source && !!this._source.buffer;\n    }\n\n    // Implement filters\n    public get filters(): Filter[]\n    {\n        return this._nodes.filters;\n    }\n    public set filters(filters: Filter[])\n    {\n        this._nodes.filters = filters;\n    }\n\n    // Implements duration\n    public get duration(): number\n    {\n        console.assert(this.isPlayable, \"Sound not yet playable, no duration\");\n        return this._source.buffer.duration;\n    }\n\n    /**\n     * Gets and sets the buffer.\n     * @name PIXI.sound.webaudio.WebAudioMedia#buffer\n     * @type {AudioBuffer}\n     */\n    public get buffer(): AudioBuffer\n    {\n        return this._source.buffer;\n    }\n    public set buffer(buffer: AudioBuffer)\n    {\n        this._source.buffer = buffer;\n    }\n\n    /**\n     * Get the current chained nodes object\n     * @private\n     * @name PIXI.sound.webaudio.WebAudioMedia#nodes\n     * @type {PIXI.sound.webaudio.WebAudioNodes}\n     */\n    public get nodes(): WebAudioNodes\n    {\n        return this._nodes;\n    }\n\n    // Implements load\n    public load(callback?: LoadedCallback): void\n    {\n        // Load from the arraybuffer, incase it was loaded outside\n        if (this.source)\n        {\n            this._decode(this.source, callback);\n        }\n        // Load from the file path\n        else if (this.parent.url)\n        {\n            this._loadUrl(callback);\n        }\n        else if (callback)\n        {\n            callback(new Error(\"sound.url or sound.source must be set\"));\n        }\n        else\n        {\n            console.error(\"sound.url or sound.source must be set\");\n        }\n    }\n\n    /**\n     * Loads a sound using XHMLHttpRequest object.\n     * @method PIXI.sound.webaudio.WebAudioMedia#_loadUrl\n     * @private\n     */\n    private _loadUrl(callback?: LoadedCallback): void\n    {\n        const request = new XMLHttpRequest();\n        const url: string = this.parent.url;\n        request.open(\"GET\", url, true);\n        request.responseType = \"arraybuffer\";\n\n        // Decode asynchronously\n        request.onload = () => {\n            this.source = request.response as ArrayBuffer;\n            this._decode(request.response, callback);\n        };\n\n        // actually start the request\n        request.send();\n    }\n\n    /**\n     * Decodes the array buffer.\n     * @method PIXI.sound.webaudio.WebAudioMedia#decode\n     * @param {ArrayBuffer} arrayBuffer From load.\n     * @private\n     */\n    private _decode(arrayBuffer: ArrayBuffer, callback?: LoadedCallback): void\n    {\n        const context = this.parent.context as WebAudioContext;\n        context.decode(arrayBuffer, (err: Error, buffer: AudioBuffer) =>\n        {\n            if (err)\n            {\n                if (callback)\n                {\n                    callback(err);\n                }\n            }\n            else\n            {\n                this.parent.isLoaded = true;\n                this.buffer = buffer;\n                const instance = this.parent.autoPlayStart();\n                if (callback)\n                {\n                    callback(null, this.parent, instance);\n                }\n            }\n        });\n    }\n}\n","import { Filterable } from \"../Filterable\";\nimport { IMediaContext } from \"../interfaces\";\n\n/**\n * Main class to handle WebAudio API. There's a simple chain\n * of AudioNode elements: analyser > compressor > context.destination.\n * any filters that are added are inserted between the analyser and compressor nodes\n * @private\n * @class WebAudioContext\n * @extends PIXI.sound.Filterable\n * @memberof PIXI.sound.webaudio\n */\nexport class WebAudioContext extends Filterable implements IMediaContext\n{\n    /**\n     * Context Compressor node\n     * @name PIXI.sound.webaudio.WebAudioContext#compressor\n     * @type {DynamicsCompressorNode}\n     * @readonly\n     */\n    public compressor: DynamicsCompressorNode;\n\n    /**\n     * Context Analyser node\n     * @name PIXI.sound.webaudio.WebAudioContext#analyser\n     * @type {AnalyserNode}\n     * @readonly\n     */\n    public analyser: AnalyserNode;\n\n    /**\n     * Global speed of all sounds\n     * @name PIXI.sound.webaudio.WebAudioContext#speed\n     * @type {number}\n     * @readonly\n     */\n    public speed: number;\n\n    /**\n     * Sets the muted state.\n     * @type {boolean}\n     * @name PIXI.sound.webaudio.WebAudioContext#muted\n     * @default false\n     */\n    public muted: boolean;\n\n    /**\n     * Sets the volume from 0 to 1.\n     * @type {number}\n     * @name PIXI.sound.webaudio.WebAudioContext#volume\n     * @default 1\n     */\n    public volume: number;\n\n    /**\n     * Handle global events\n     * @type {PIXI.utils.EventEmitter}\n     * @name PIXI.sound.webaudio.WebAudioContext#events\n     * @default 1\n     */\n    public events: PIXI.utils.EventEmitter;\n\n    /**\n     * The instance of the AudioContext for WebAudio API.\n     * @name PIXI.sound.webaudio.WebAudioContext#_ctx\n     * @type {AudioContext}\n     * @private\n     */\n    private _ctx: AudioContext;\n\n    /**\n     * The instance of the OfflineAudioContext for fast decoding audio.\n     * @name PIXI.sound.webaudio.WebAudioContext#_offlineCtx\n     * @type {OfflineAudioContext}\n     * @private\n     */\n    private _offlineCtx: OfflineAudioContext;\n\n    /**\n     * Current paused status\n     * @name PIXI.sound.webaudio.WebAudioContext#_paused\n     * @type {boolean}\n     * @private\n     * @default false\n     */\n    private _paused: boolean;\n\n    /**\n     * Indicated whether audio on iOS has been unlocked, which requires a touchend/mousedown event that plays an\n     * empty sound.\n     * @name PIXI.sound.webaudio.WebAudioContext#_unlocked\n     * @type {boolean}\n     * @private\n     */\n    private _unlocked: boolean;\n\n    constructor()\n    {\n        const win: any = window as any;\n        const ctx = new WebAudioContext.AudioContext();\n        const compressor: DynamicsCompressorNode = ctx.createDynamicsCompressor();\n        const analyser: AnalyserNode = ctx.createAnalyser();\n\n        // setup the end of the node chain\n        analyser.connect(compressor);\n        compressor.connect(ctx.destination);\n\n        super(analyser, compressor);\n\n        this._ctx = ctx;\n        // ios11 safari's webkitOfflineAudioContext allows only 44100 Hz sample rate\n        this._offlineCtx = new WebAudioContext.OfflineAudioContext(1, 2,\n            (win.OfflineAudioContext) ? ctx.sampleRate : 44100);\n        this._unlocked = false;\n\n        this.compressor = compressor;\n        this.analyser = analyser;\n        this.events = new PIXI.utils.EventEmitter();\n\n        // Set the defaults\n        this.volume = 1;\n        this.speed = 1;\n        this.muted = false;\n        this.paused = false;\n\n        // Listen for document level clicks to unlock WebAudio. See the _unlock method.\n        if (ctx.state !== \"running\")\n        {\n            this._unlock(); // When played inside of a touch event, this will enable audio on iOS immediately.\n            this._unlock = this._unlock.bind(this);\n            document.addEventListener(\"mousedown\", this._unlock, true);\n            document.addEventListener(\"touchstart\", this._unlock, true);\n            document.addEventListener(\"touchend\", this._unlock, true);\n        }\n    }\n\n    /**\n     * Try to unlock audio on iOS. This is triggered from either WebAudio plugin setup (which will work if inside of\n     * a `mousedown` or `touchend` event stack), or the first document touchend/mousedown event. If it fails (touchend\n     * will fail if the user presses for too long, indicating a scroll event instead of a click event.\n     *\n     * Note that earlier versions of iOS supported `touchstart` for this, but iOS9 removed this functionality. Adding\n     * a `touchstart` event to support older platforms may preclude a `mousedown` even from getting fired on iOS9, so we\n     * stick with `mousedown` and `touchend`.\n     * @method PIXI.sound.webaudio.WebAudioContext#_unlock\n     * @private\n     */\n    private _unlock(): void\n    {\n        if (this._unlocked)\n        {\n            return;\n        }\n        this.playEmptySound();\n        if (this._ctx.state === \"running\")\n        {\n            document.removeEventListener(\"mousedown\", this._unlock, true);\n            document.removeEventListener(\"touchend\", this._unlock, true);\n            document.removeEventListener(\"touchstart\", this._unlock, true);\n            this._unlocked = true;\n        }\n    }\n\n    /**\n     * Plays an empty sound in the web audio context.  This is used to enable web audio on iOS devices, as they\n     * require the first sound to be played inside of a user initiated event (touch/click).\n     * @method PIXI.sound.webaudio.WebAudioContext#playEmptySound\n     */\n    public playEmptySound(): void\n    {\n        const source = this._ctx.createBufferSource();\n        source.buffer = this._ctx.createBuffer(1, 1, 22050);\n        source.connect(this._ctx.destination);\n        source.start(0, 0, 0);\n        if (source.context.state === \"suspended\")\n        {\n            source.context.resume();\n        }\n    }\n\n    /**\n     * Get AudioContext class, if not supported returns `null`\n     * @name PIXI.sound.webaudio.WebAudioContext.AudioContext\n     * @type {Function}\n     * @static\n     */\n    public static get AudioContext(): typeof AudioContext\n    {\n        const win: any = window as any;\n        return (\n            win.AudioContext ||\n            win.webkitAudioContext ||\n            null\n        );\n    }\n\n    /**\n     * Get OfflineAudioContext class, if not supported returns `null`\n     * @name PIXI.sound.webaudio.WebAudioContext.OfflineAudioContext\n     * @type {Function}\n     * @static\n     */\n    public static get OfflineAudioContext(): typeof OfflineAudioContext\n    {\n        const win: any = window as any;\n        return (\n            win.OfflineAudioContext ||\n            win.webkitOfflineAudioContext ||\n            null\n        );\n    }\n\n    /**\n     * Destroy this context.\n     * @method PIXI.sound.webaudio.WebAudioContext#destroy\n     */\n    public destroy()\n    {\n        super.destroy();\n\n        const ctx: any = this._ctx as any;\n        // check if browser supports AudioContext.close()\n        if (typeof ctx.close !== \"undefined\")\n        {\n            ctx.close();\n        }\n        this.events.removeAllListeners();\n        this.analyser.disconnect();\n        this.compressor.disconnect();\n        this.analyser = null;\n        this.compressor = null;\n        this.events = null;\n        this._offlineCtx = null;\n        this._ctx = null;\n    }\n\n    /**\n     * The WebAudio API AudioContext object.\n     * @name PIXI.sound.webaudio.WebAudioContext#audioContext\n     * @type {AudioContext}\n     * @readonly\n     */\n    public get audioContext(): AudioContext\n    {\n        return this._ctx;\n    }\n\n    /**\n     * The WebAudio API OfflineAudioContext object.\n     * @name PIXI.sound.webaudio.WebAudioContext#offlineContext\n     * @type {OfflineAudioContext}\n     * @readonly\n     */\n    public get offlineContext(): OfflineAudioContext\n    {\n        return this._offlineCtx;\n    }\n\n    /**\n     * Pauses all sounds, even though we handle this at the instance\n     * level, we'll also pause the audioContext so that the\n     * time used to compute progress isn't messed up.\n     * @type {boolean}\n     * @name PIXI.sound.webaudio.WebAudioContext#paused\n     * @default false\n     */\n    public set paused(paused: boolean)\n    {\n        if (paused && this._ctx.state === \"running\")\n        {\n            (this._ctx as any).suspend();\n        }\n        else if (!paused && this._ctx.state === \"suspended\")\n        {\n            (this._ctx as any).resume();\n        }\n        this._paused = paused;\n    }\n    public get paused(): boolean\n    {\n        return this._paused;\n    }\n\n    /**\n     * Emit event when muted, volume or speed changes\n     * @method PIXI.sound.webaudio.WebAudioContext#refresh\n     * @private\n     */\n    public refresh(): void\n    {\n        this.events.emit(\"refresh\");\n    }\n\n    /**\n     * Emit event when muted, volume or speed changes\n     * @method PIXI.sound.webaudio.WebAudioContext#refreshPaused\n     * @private\n     */\n    public refreshPaused(): void\n    {\n        this.events.emit(\"refreshPaused\");\n    }\n\n    /**\n     * Toggles the muted state.\n     * @method PIXI.sound.webaudio.WebAudioContext#toggleMute\n     * @return {boolean} The current muted state.\n     */\n    public toggleMute(): boolean\n    {\n        this.muted = !this.muted;\n        this.refresh();\n        return this.muted;\n    }\n\n    /**\n     * Toggles the paused state.\n     * @method PIXI.sound.webaudio.WebAudioContext#togglePause\n     * @return {boolean} The current muted state.\n     */\n    public togglePause(): boolean\n    {\n        this.paused = !this.paused;\n        this.refreshPaused();\n        return this._paused;\n    }\n\n    /**\n     * Decode the audio data\n     * @method PIXI.sound.webaudio.WebAudioContext#decode\n     * @param {ArrayBuffer} arrayBuffer Buffer from loader\n     * @param {Function} callback When completed, error and audioBuffer are parameters.\n     */\n    public decode(arrayBuffer: ArrayBuffer, callback: (err?: Error, buffer?: AudioBuffer) => void): void\n    {\n        this._offlineCtx.decodeAudioData(\n            arrayBuffer, (buffer: AudioBuffer) => {\n                callback(null, buffer);\n            },\n            (err) => {\n                callback(new Error(err.message || \"Unable to decode file\"));\n            },\n        );\n    }\n}\n","import { getInstance } from \"../instance\";\nimport { WebAudioUtils } from \"../webaudio\";\nimport { Filter } from \"./Filter\";\n\ninterface Band {\n    f: number;\n    type: string;\n    gain: number;\n}\n\n/**\n * Filter for adding equalizer bands.\n *\n * @class EqualizerFilter\n * @memberof PIXI.sound.filters\n * @param {number} [f32=0] Default gain for 32 Hz\n * @param {number} [f64=0] Default gain for 64 Hz\n * @param {number} [f125=0] Default gain for 125 Hz\n * @param {number} [f250=0] Default gain for 250 Hz\n * @param {number} [f500=0] Default gain for 500 Hz\n * @param {number} [f1k=0] Default gain for 1000 Hz\n * @param {number} [f2k=0] Default gain for 2000 Hz\n * @param {number} [f4k=0] Default gain for 4000 Hz\n * @param {number} [f8k=0] Default gain for 8000 Hz\n * @param {number} [f16k=0] Default gain for 16000 Hz\n */\nexport class EqualizerFilter extends Filter\n{\n    /**\n     * Band at 32 Hz\n     * @name PIXI.sound.filters.EqualizerFilter.F32\n     * @type {number}\n     * @readonly\n     */\n    public static F32: number = 32;\n\n    /**\n     * Band at 64 Hz\n     * @name PIXI.sound.filters.EqualizerFilter.F64\n     * @type {number}\n     * @readonly\n     */\n    public static F64: number = 64;\n\n    /**\n     * Band at 125 Hz\n     * @name PIXI.sound.filters.EqualizerFilter.F125\n     * @type {number}\n     * @readonly\n     */\n    public static F125: number = 125;\n\n    /**\n     * Band at 250 Hz\n     * @name PIXI.sound.filters.EqualizerFilter.F250\n     * @type {number}\n     * @readonly\n     */\n    public static F250: number = 250;\n\n    /**\n     * Band at 500 Hz\n     * @name PIXI.sound.filters.EqualizerFilter.F500\n     * @type {number}\n     * @readonly\n     */\n    public static F500: number = 500;\n\n    /**\n     * Band at 1000 Hz\n     * @name PIXI.sound.filters.EqualizerFilter.F1K\n     * @type {number}\n     * @readonly\n     */\n    public static F1K: number = 1000;\n\n    /**\n     * Band at 2000 Hz\n     * @name PIXI.sound.filters.EqualizerFilter.F2K\n     * @type {number}\n     * @readonly\n     */\n    public static F2K: number = 2000;\n\n    /**\n     * Band at 4000 Hz\n     * @name PIXI.sound.filters.EqualizerFilter.F4K\n     * @type {number}\n     * @readonly\n     */\n    public static F4K: number = 4000;\n\n    /**\n     * Band at 8000 Hz\n     * @name PIXI.sound.filters.EqualizerFilter.F8K\n     * @type {number}\n     * @readonly\n     */\n    public static F8K: number = 8000;\n\n    /**\n     * Band at 16000 Hz\n     * @name PIXI.sound.filters.EqualizerFilter.F16K\n     * @type {number}\n     * @readonly\n     */\n    public static F16K: number = 16000;\n\n    /**\n     * The list of bands\n     * @name PIXI.sounds.filters.EqualizerFilter#bands\n     * @type {BiquadFilterNode[]}\n     * @readonly\n     */\n    public bands: BiquadFilterNode[];\n\n    /**\n     * The map of bands to frequency\n     * @name PIXI.sounds.filters.EqualizerFilter#bandsMap\n     * @type {Object}\n     * @readonly\n     */\n    public bandsMap: {[id: number]: BiquadFilterNode};\n\n    constructor(f32: number = 0, f64: number = 0, f125: number = 0, f250: number = 0, f500: number = 0,\n                f1k: number = 0, f2k: number = 0, f4k: number = 0, f8k: number = 0, f16k: number = 0)\n    {\n        if (getInstance().useLegacy)\n        {\n            super(null);\n            return;\n        }\n\n        const equalizerBands: Band[] = [\n            {\n                f: EqualizerFilter.F32,\n                type: \"lowshelf\",\n                gain: f32,\n            },\n            {\n                f: EqualizerFilter.F64,\n                type: \"peaking\",\n                gain: f64,\n            },\n            {\n                f: EqualizerFilter.F125,\n                type: \"peaking\",\n                gain: f125,\n            },\n            {\n                f: EqualizerFilter.F250,\n                type: \"peaking\",\n                gain: f250,\n            },\n            {\n                f: EqualizerFilter.F500,\n                type: \"peaking\",\n                gain: f500,\n            },\n            {\n                f: EqualizerFilter.F1K,\n                type: \"peaking\",\n                gain: f1k,\n            },\n            {\n                f: EqualizerFilter.F2K,\n                type: \"peaking\",\n                gain: f2k,\n            },\n            {\n                f: EqualizerFilter.F4K,\n                type: \"peaking\",\n                gain: f4k,\n            },\n            {\n                f: EqualizerFilter.F8K,\n                type: \"peaking\",\n                gain: f8k,\n            },\n            {\n                f: EqualizerFilter.F16K,\n                type: \"highshelf\",\n                gain: f16k,\n            },\n        ];\n\n        const bands: BiquadFilterNode[] = equalizerBands.map((band: Band) =>\n        {\n            const node: BiquadFilterNode = getInstance().context.audioContext.createBiquadFilter();\n            node.type = band.type as BiquadFilterType;\n            WebAudioUtils.setParamValue(node.Q, 1);\n            node.frequency.value = band.f; // WebAudioUtils.setParamValue(filter.frequency, band.f);\n            WebAudioUtils.setParamValue(node.gain, band.gain);\n            return node;\n        });\n\n        // Setup the constructor AudioNode, where first is the input, and last is the output\n        super(bands[0], bands[bands.length - 1]);\n\n        // Manipulate the bands\n        this.bands = bands;\n\n        // Create a map\n        this.bandsMap = {};\n\n        for (let i = 0; i < this.bands.length; i++)\n        {\n            const node: BiquadFilterNode = this.bands[i];\n\n            // Connect the previous band to the current one\n            if (i > 0)\n            {\n                this.bands[i - 1].connect(node);\n            }\n            this.bandsMap[node.frequency.value] = node;\n        }\n    }\n\n    /**\n     * Set gain on a specific frequency.\n     * @method PIXI.sound.filters.EqualizerFilter#setGain\n     * @param {number} frequency The frequency, see EqualizerFilter.F* for bands\n     * @param {number} [gain=0] Recommended -40 to 40.\n     */\n    public setGain(frequency: number, gain: number = 0): void\n    {\n        if (!this.bandsMap[frequency])\n        {\n            throw new Error(\"No band found for frequency \" + frequency);\n        }\n        WebAudioUtils.setParamValue(this.bandsMap[frequency].gain, gain);\n    }\n\n    /**\n     * Get gain amount on a specific frequency.\n     * @method PIXI.sound.filters.EqualizerFilter#getGain\n     * @return {number} The amount of gain set.\n     */\n    public getGain(frequency: number): number\n    {\n        if (!this.bandsMap[frequency])\n        {\n            throw new Error(\"No band found for frequency \" + frequency);\n        }\n        return this.bandsMap[frequency].gain.value;\n    }\n\n    /**\n     * Gain at 32 Hz frequencey.\n     * @name PIXI.sound.filters.EqualizerFilter#f32\n     * @type {number}\n     * @default 0\n     */\n    public set f32(value: number)\n    {\n        this.setGain(EqualizerFilter.F32, value);\n    }\n    public get f32(): number\n    {\n        return this.getGain(EqualizerFilter.F32);\n    }\n\n    /**\n     * Gain at 64 Hz frequencey.\n     * @name PIXI.sound.filters.EqualizerFilter#f64\n     * @type {number}\n     * @default 0\n     */\n    public set f64(value: number)\n    {\n        this.setGain(EqualizerFilter.F64, value);\n    }\n    public get f64(): number\n    {\n        return this.getGain(EqualizerFilter.F64);\n    }\n\n    /**\n     * Gain at 125 Hz frequencey.\n     * @name PIXI.sound.filters.EqualizerFilter#f125\n     * @type {number}\n     * @default 0\n     */\n    public set f125(value: number)\n    {\n        this.setGain(EqualizerFilter.F125, value);\n    }\n    public get f125(): number\n    {\n        return this.getGain(EqualizerFilter.F125);\n    }\n\n    /**\n     * Gain at 250 Hz frequencey.\n     * @name PIXI.sound.filters.EqualizerFilter#f250\n     * @type {number}\n     * @default 0\n     */\n    public set f250(value: number)\n    {\n        this.setGain(EqualizerFilter.F250, value);\n    }\n    public get f250(): number\n    {\n        return this.getGain(EqualizerFilter.F250);\n    }\n\n    /**\n     * Gain at 500 Hz frequencey.\n     * @name PIXI.sound.filters.EqualizerFilter#f500\n     * @type {number}\n     * @default 0\n     */\n    public set f500(value: number)\n    {\n        this.setGain(EqualizerFilter.F500, value);\n    }\n    public get f500(): number\n    {\n        return this.getGain(EqualizerFilter.F500);\n    }\n\n    /**\n     * Gain at 1 KHz frequencey.\n     * @name PIXI.sound.filters.EqualizerFilter#f1k\n     * @type {number}\n     * @default 0\n     */\n    public set f1k(value: number)\n    {\n        this.setGain(EqualizerFilter.F1K, value);\n    }\n    public get f1k(): number\n    {\n        return this.getGain(EqualizerFilter.F1K);\n    }\n\n    /**\n     * Gain at 2 KHz frequencey.\n     * @name PIXI.sound.filters.EqualizerFilter#f2k\n     * @type {number}\n     * @default 0\n     */\n    public set f2k(value: number)\n    {\n        this.setGain(EqualizerFilter.F2K, value);\n    }\n    public get f2k(): number\n    {\n        return this.getGain(EqualizerFilter.F2K);\n    }\n\n    /**\n     * Gain at 4 KHz frequencey.\n     * @name PIXI.sound.filters.EqualizerFilter#f4k\n     * @type {number}\n     * @default 0\n     */\n    public set f4k(value: number)\n    {\n        this.setGain(EqualizerFilter.F4K, value);\n    }\n    public get f4k(): number\n    {\n        return this.getGain(EqualizerFilter.F4K);\n    }\n\n    /**\n     * Gain at 8 KHz frequencey.\n     * @name PIXI.sound.filters.EqualizerFilter#f8k\n     * @type {number}\n     * @default 0\n     */\n    public set f8k(value: number)\n    {\n        this.setGain(EqualizerFilter.F8K, value);\n    }\n    public get f8k(): number\n    {\n        return this.getGain(EqualizerFilter.F8K);\n    }\n\n    /**\n     * Gain at 16 KHz frequencey.\n     * @name PIXI.sound.filters.EqualizerFilter#f16k\n     * @type {number}\n     * @default 0\n     */\n    public set f16k(value: number)\n    {\n        this.setGain(EqualizerFilter.F16K, value);\n    }\n    public get f16k(): number\n    {\n        return this.getGain(EqualizerFilter.F16K);\n    }\n\n    /**\n     * Reset all frequency bands to have gain of 0\n     * @method PIXI.sound.filters.EqualizerFilter#reset\n     */\n    public reset(): void\n    {\n        this.bands.forEach((band: BiquadFilterNode) => {\n            WebAudioUtils.setParamValue(band.gain, 0);\n        });\n    }\n\n    public destroy(): void\n    {\n        this.bands.forEach((band: BiquadFilterNode) => {\n            band.disconnect();\n        });\n        this.bands = null;\n        this.bandsMap = null;\n    }\n}\n","import { getInstance } from \"../instance\";\nimport { Filter } from \"./Filter\";\n\n/**\n * Filter for adding adding delaynode.\n *\n * @class DistortionFilter\n * @memberof PIXI.sound.filters\n * @param {number} [amount=0] The amount of distoration from 0 to 1.\n */\nexport class DistortionFilter extends Filter\n{\n    /**\n     * The Wave shape node use to distort\n     * @name PIXI.sound.filters.DistortionFilter#_distortion\n     * @type {WaveShaperNode}\n     * @private\n     */\n    private _distortion: WaveShaperNode;\n\n    /**\n     * The amount of distoration\n     * @name PIXI.sound.filters.DistortionFilter#_amount\n     * @type {number}\n     * @private\n     */\n    private _amount: number;\n\n    constructor(amount: number = 0)\n    {\n        if (getInstance().useLegacy)\n        {\n            super(null);\n            return;\n        }\n\n        const {context} = getInstance();\n        const distortion: WaveShaperNode = context.audioContext.createWaveShaper();\n\n        super(distortion);\n\n        this._distortion = distortion;\n\n        this.amount = amount;\n    }\n\n    /**\n     * @name PIXI.sound.filters.Distoration#amount\n     * @type {number}\n     */\n    set amount(value: number)\n    {\n        value *= 1000;\n        this._amount = value;\n        const samples: number = 44100;\n        const curve: Float32Array = new Float32Array(samples);\n        const deg: number = Math.PI / 180;\n\n        let i: number = 0;\n        let x: number;\n\n        for (; i < samples; ++i)\n        {\n            x = i * 2 / samples - 1;\n            curve[i] = (3 + value) * x * 20 * deg / (Math.PI + value * Math.abs(x));\n        }\n        this._distortion.curve = curve;\n        this._distortion.oversample = \"4x\";\n    }\n    get amount(): number\n    {\n        return this._amount;\n    }\n\n    public destroy(): void\n    {\n        this._distortion = null;\n        super.destroy();\n    }\n}\n","import { getInstance } from \"../instance\";\nimport { WebAudioUtils } from \"../webaudio\";\nimport { Filter } from \"./Filter\";\n\n/**\n * Filter for adding Stereo panning.\n *\n * @class StereoFilter\n * @memberof PIXI.sound.filters\n * @param {number} [pan=0] The amount of panning, -1 is left, 1 is right, 0 is centered.\n */\nexport class StereoFilter extends Filter\n{\n    /**\n     * The stereo panning node\n     * @name PIXI.sound.filters.StereoFilter#_stereo\n     * @type {StereoPannerNode}\n     * @private\n     */\n    private _stereo: StereoPannerNode;\n\n    /**\n     * The stereo panning node\n     * @name PIXI.sound.filters.StereoFilter#_panner\n     * @type {PannerNode}\n     * @private\n     */\n    private _panner: PannerNode;\n\n    /**\n     * The amount of panning, -1 is left, 1 is right, 0 is centered\n     * @name PIXI.sound.filters.StereoFilter#_pan\n     * @type {number}\n     * @private\n     */\n    private _pan: number;\n\n    constructor(pan: number = 0)\n    {\n        if (getInstance().useLegacy)\n        {\n            super(null);\n            return;\n        }\n\n        let stereo: StereoPannerNode;\n        let panner: PannerNode;\n        let destination: AudioNode;\n        const {audioContext} = getInstance().context;\n\n        if (audioContext.createStereoPanner)\n        {\n            stereo = audioContext.createStereoPanner();\n            destination = stereo;\n        }\n        else\n        {\n            panner = audioContext.createPanner();\n            panner.panningModel = \"equalpower\";\n            destination = panner;\n        }\n\n        super(destination);\n\n        this._stereo = stereo;\n        this._panner = panner;\n\n        this.pan = pan;\n    }\n\n    /**\n     * Set the amount of panning, where -1 is left, 1 is right, and 0 is centered\n     * @name PIXI.sound.filters.StereoFilter#pan\n     * @type {number}\n     */\n    set pan(value: number)\n    {\n        this._pan = value;\n        if (this._stereo)\n        {\n            WebAudioUtils.setParamValue(this._stereo.pan, value);\n        }\n        else\n        {\n            this._panner.setPosition(value, 0, 1 - Math.abs(value));\n        }\n    }\n    get pan(): number\n    {\n        return this._pan;\n    }\n\n    public destroy(): void\n    {\n        super.destroy();\n        this._stereo = null;\n        this._panner = null;\n    }\n}\n","import { getInstance } from \"../instance\";\nimport { Filter } from \"./Filter\";\n\n/**\n * Filter for adding reverb. Refactored from\n * https://github.com/web-audio-components/simple-reverb/\n *\n * @class ReverbFilter\n * @memberof PIXI.sound.filters\n * @param {number} [seconds=3] Seconds for reverb\n * @param {number} [decay=2] The decay length\n * @param {boolean} [reverse=false] Reverse reverb\n */\nexport class ReverbFilter extends Filter\n{\n    /**\n     * @name PIXI.sound.filters.ReverbFilter#_seconds\n     * @type {number}\n     * @private\n     */\n    private _seconds: number;\n\n    /**\n     * @name PIXI.sound.filters.ReverbFilter#_decay\n     * @type {number}\n     * @private\n     */\n    private _decay: number;\n\n    /**\n     * @name PIXI.sound.filters.ReverbFilter#_reverse\n     * @type {number}\n     * @private\n     */\n    private _reverse: boolean;\n\n    constructor(seconds: number = 3, decay: number = 2, reverse: boolean = false)\n    {\n        if (getInstance().useLegacy)\n        {\n            super(null);\n            return;\n        }\n\n        super(null);\n\n        this._seconds = this._clamp(seconds, 1, 50);\n        this._decay = this._clamp(decay, 0, 100);\n        this._reverse = reverse;\n        this._rebuild();\n    }\n\n    /**\n     * Clamp a value\n     * @method PIXI.sound.filters.ReverbFilter#_clamp\n     * @private\n     * @param {number} value\n     * @param {number} min Minimum value\n     * @param {number} max Maximum value\n     * @return {number} Clamped number\n     */\n    private _clamp(value: number, min: number, max: number): number\n    {\n        return Math.min(max, Math.max(min, value));\n    }\n\n    /**\n     * Length of reverb in seconds from 1 to 50\n     * @name PIXI.sound.filters.ReverbFilter#decay\n     * @type {number}\n     * @default 3\n     */\n    get seconds(): number\n    {\n        return this._seconds;\n    }\n    set seconds(seconds: number)\n    {\n        this._seconds = this._clamp(seconds, 1, 50);\n        this._rebuild();\n    }\n\n    /**\n     * Decay value from 0 to 100\n     * @name PIXI.sound.filters.ReverbFilter#decay\n     * @type {number}\n     * @default 2\n     */\n    get decay(): number\n    {\n        return this._decay;\n    }\n    set decay(decay: number)\n    {\n        this._decay = this._clamp(decay, 0, 100);\n        this._rebuild();\n    }\n\n    /**\n     * Reverse value from 0 to 1\n     * @name PIXI.sound.filters.ReverbFilter#reverse\n     * @type {boolean}\n     * @default false\n     */\n    get reverse(): boolean\n    {\n        return this._reverse;\n    }\n    set reverse(reverse: boolean)\n    {\n        this._reverse = reverse;\n        this._rebuild();\n    }\n\n    /**\n     * Utility function for building an impulse response\n     * from the module parameters.\n     * @method PIXI.sound.filters.ReverbFilter#_rebuild\n     * @private\n     */\n    private _rebuild(): void\n    {\n        const context = getInstance().context.audioContext;\n        const rate: number = context.sampleRate;\n        const length: number = rate * this._seconds;\n        const impulse: AudioBuffer = context.createBuffer(2, length, rate);\n        const impulseL: Float32Array = impulse.getChannelData(0);\n        const impulseR: Float32Array = impulse.getChannelData(1);\n        let n: number;\n\n        for (let i: number = 0; i < length; i++)\n        {\n            n = this._reverse ? length - i : i;\n            impulseL[i] = (Math.random() * 2 - 1) * Math.pow(1 - n / length, this._decay);\n            impulseR[i] = (Math.random() * 2 - 1) * Math.pow(1 - n / length, this._decay);\n        }\n        const convolver = getInstance().context.audioContext.createConvolver();\n        convolver.buffer = impulse;\n        this.init(convolver);\n    }\n}\n","import { getInstance } from \"../instance\";\nimport { Filter } from \"./Filter\";\n\n/**\n * Combine all channels into mono channel.\n *\n * @class MonoFilter\n * @memberof PIXI.sound.filters\n */\nexport class MonoFilter extends Filter\n{\n    /**\n     * Merger node\n     * @name PIXI.sound.filters.MonoFilter#_merge\n     * @type {ChannelMergerNode}\n     * @private\n     */\n    private _merger: ChannelMergerNode;\n\n    constructor()\n    {\n        if (getInstance().useLegacy)\n        {\n            super(null);\n            return;\n        }\n        const audioContext: AudioContext = getInstance().context.audioContext;\n        const splitter: ChannelSplitterNode = audioContext.createChannelSplitter();\n        const merger: ChannelMergerNode = audioContext.createChannelMerger();\n        merger.connect(splitter);\n        super(merger, splitter);\n        this._merger = merger;\n    }\n\n    public destroy(): void\n    {\n        this._merger.disconnect();\n        this._merger = null;\n        super.destroy();\n    }\n}\n","import { getInstance } from \"../instance\";\nimport { WebAudioUtils } from \"../webaudio\";\nimport { Filter } from \"./Filter\";\n\n/**\n * Creates a telephone-sound filter.\n *\n * @class TelephoneFilter\n * @memberof PIXI.sound.filters\n */\nexport class TelephoneFilter extends Filter\n{\n    constructor()\n    {\n        if (getInstance().useLegacy)\n        {\n            super(null);\n            return;\n        }\n\n        const {audioContext} = getInstance().context;\n        const lpf1 = audioContext.createBiquadFilter();\n        const lpf2 = audioContext.createBiquadFilter();\n        const hpf1 = audioContext.createBiquadFilter();\n        const hpf2 = audioContext.createBiquadFilter();\n\n        lpf1.type = \"lowpass\";\n        WebAudioUtils.setParamValue(lpf1.frequency, 2000.0);\n\n        lpf2.type = \"lowpass\";\n        WebAudioUtils.setParamValue(lpf2.frequency, 2000.0);\n\n        hpf1.type = \"highpass\";\n        WebAudioUtils.setParamValue(hpf1.frequency, 500.0);\n\n        hpf2.type = \"highpass\";\n        WebAudioUtils.setParamValue(hpf2.frequency, 500.0);\n\n        lpf1.connect(lpf2);\n        lpf2.connect(hpf1);\n        hpf1.connect(hpf2);\n\n        super(lpf1, hpf2);\n    }\n}\n","import { IMediaInstance } from \"../interfaces/IMediaInstance\";\nimport { PlayOptions } from \"../Sound\";\nimport { HTMLAudioMedia } from \"./HTMLAudioMedia\";\n\nlet id = 0;\n\n/**\n * Instance which wraps the `<audio>` element playback.\n * @private\n * @class HTMLAudioInstance\n * @memberof PIXI.sound.htmlaudio\n */\nexport class HTMLAudioInstance extends PIXI.utils.EventEmitter implements IMediaInstance\n{\n    /**\n     * Extra padding, in seconds, to deal with low-latecy of HTMLAudio.\n     * @name PIXI.sound.htmlaudio.HTMLAudioInstance.PADDING\n     * @readonly\n     * @default 0.1\n     */\n    public static PADDING: number = 0.1;\n\n    /**\n     * The current unique ID for this instance.\n     * @name PIXI.sound.htmlaudio.HTMLAudioInstance#id\n     * @readonly\n     */\n    public id: number;\n\n    /**\n     * The instance of the Audio element.\n     * @type {HTMLAudioElement}\n     * @name PIXI.sound.htmlaudio.HTMLAudioInstance#_source\n     * @private\n     */\n    private _source: HTMLAudioElement;\n\n    /**\n     * The instance of the Audio media element.\n     * @type {PIXI.sound.htmlaudio.HTMLAudioMedia}\n     * @name PIXI.sound.htmlaudio.HTMLAudioInstance#_media\n     * @private\n     */\n    private _media: HTMLAudioMedia;\n\n    /**\n     * Playback rate, where 1 is 100%.\n     * @type {number}\n     * @name PIXI.sound.htmlaudio.HTMLAudioInstance#_end\n     * @private\n     */\n    private _end: number;\n\n    /**\n     * Current instance paused state.\n     * @type {boolean}\n     * @name PIXI.sound.htmlaudio.HTMLAudioInstance#_paused\n     * @private\n     */\n    private _paused: boolean;\n\n    /**\n     * Current instance muted state.\n     * @type {boolean}\n     * @name PIXI.sound.htmlaudio.HTMLAudioInstance#_muted\n     * @private\n     */\n    private _muted: boolean;\n\n    /**\n     * Current actual paused state.\n     * @type {boolean}\n     * @name PIXI.sound.htmlaudio.HTMLAudioInstance#_pausedReal\n     * @private\n     */\n    private _pausedReal: boolean;\n\n    /**\n     * Total length of the audio.\n     * @type {number}\n     * @name PIXI.sound.htmlaudio.HTMLAudioInstance#_duration\n     * @private\n     */\n    private _duration: number;\n\n    /**\n     * Playback rate, where 1 is 100%.\n     * @type {number}\n     * @name PIXI.sound.htmlaudio.HTMLAudioInstance#_start\n     * @private\n     */\n    private _start: number;\n\n    /**\n     * `true` if the audio is actually playing.\n     * @type {boolean}\n     * @name PIXI.sound.htmlaudio.HTMLAudioInstance#_playing\n     * @private\n     */\n    private _playing: boolean;\n\n    /**\n     * Volume for the instance.\n     * @type {number}\n     * @name PIXI.sound.htmlaudio.HTMLAudioInstance#_volume\n     * @private\n     */\n    private _volume: number;\n\n    /**\n     * Speed for the instance.\n     * @type {number}\n     * @name PIXI.sound.htmlaudio.HTMLAudioInstance#_speed\n     * @private\n     */\n    private _speed: number;\n\n    /**\n     * `true` for looping the playback\n     * @type {boolean}\n     * @name PIXI.sound.htmlaudio.HTMLAudioInstance#_loop\n     * @private\n     */\n    private _loop: boolean;\n\n    /**\n     * The number of seconds to wait before starting playback\n     * @type {number}\n     * @name PIXI.sound.htmlaudio.HTMLAudioInstance#_wait\n     * @private\n     */\n    private _wait: number;\n\n    /**\n     * Timer to delay playback\n     * @type {number}\n     * @name PIXI.sound.htmlaudio.HTMLAudioInstance#_waitTimer\n     * @private\n     */\n    private _waitTimer: number = null;\n\n    /**\n     * Timestamp when playback delay was started\n     * @type {number}\n     * @name PIXI.sound.htmlaudio.HTMLAudioInstance#_waitStart\n     * @private\n     */\n    private _waitStart: number;\n\n    constructor(parent: HTMLAudioMedia)\n    {\n        super();\n\n        this.id = id++;\n\n        this.init(parent);\n    }\n\n    /**\n     * The current playback progress from 0 to 1.\n     * @type {number}\n     * @name PIXI.sound.htmlaudio.HTMLAudioInstance#progress\n     */\n    public get progress(): number\n    {\n        const {currentTime} = this._source;\n        return currentTime / this._duration;\n    }\n\n    /**\n     * Pauses the sound.\n     * @type {boolean}\n     * @name PIXI.sound.htmlaudio.HTMLAudioInstance#paused\n     */\n    public get paused(): boolean\n    {\n        return this._paused;\n    }\n    public set paused(paused: boolean)\n    {\n        this._paused = paused;\n        this.refreshPaused();\n    }\n\n    /**\n     * Reference: http://stackoverflow.com/a/40370077\n     */\n    private _onPlay(): void\n    {\n        this._playing = true;\n    }\n\n    /**\n     * Reference: http://stackoverflow.com/a/40370077\n     */\n    private _onPause(): void\n    {\n        this._playing = false;\n    }\n\n    /**\n     * Initialize the instance.\n     * @method PIXI.sound.htmlaudio.HTMLAudioInstance#init\n     * @param {PIXI.sound.htmlaudio.HTMLAudioMedia} media\n     */\n    public init(media: HTMLAudioMedia): void\n    {\n        this._playing = false;\n        this._duration = media.source.duration;\n        const source = this._source = media.source.cloneNode(false) as HTMLAudioElement;\n        source.src = media.parent.url;\n        source.onplay = this._onPlay.bind(this);\n        source.onpause = this._onPause.bind(this);\n        media.context.on(\"refresh\", this.refresh, this);\n        media.context.on(\"refreshPaused\", this.refreshPaused, this);\n        this._media = media;\n    }\n\n    /**\n     * Stop the sound playing\n     * @method PIXI.sound.htmlaudio.HTMLAudioInstance#_internalStop\n     * @private\n     */\n    private _internalStop(): void\n    {\n        if (this._source && this._playing)\n        {\n            this._source.onended = null;\n            this._source.pause();\n        }\n        else if (this._waitTimer !== null) {\n            window.clearTimeout(this._waitTimer);\n            this._waitTimer = null;\n            this._wait -= (Date.now() - this._waitStart) / 1000;\n        }\n    }\n\n    /**\n     * Stop the sound playing\n     * @method PIXI.sound.htmlaudio.HTMLAudioInstance#stop\n     */\n    public stop(): void\n    {\n        this._internalStop();\n\n        if (this._source)\n        {\n            this.emit(\"stop\");\n        }\n    }\n\n    /**\n     * Set the instance speed from 0 to 1\n     * @member {number} PIXI.sound.htmlaudio.HTMLAudioInstance#speed\n     */\n    public get speed(): number\n    {\n        return this._speed;\n    }\n    public set speed(speed: number)\n    {\n        this._speed = speed;\n        this.refresh();\n    }\n\n    /**\n     * Get the set the volume for this instance from 0 to 1\n     * @member {number} PIXI.sound.htmlaudio.HTMLAudioInstance#volume\n     */\n    public get volume(): number\n    {\n        return this._volume;\n    }\n    public set volume(volume: number)\n    {\n        this._volume = volume;\n        this.refresh();\n    }\n\n    /**\n     * If the sound instance should loop playback\n     * @member {boolean} PIXI.sound.htmlaudio.HTMLAudioInstance#loop\n     */\n    public get loop(): boolean\n    {\n        return this._loop;\n    }\n    public set loop(loop: boolean)\n    {\n        this._loop = loop;\n        this.refresh();\n    }\n\n    /**\n     * `true` if the sound is muted\n     * @member {boolean} PIXI.sound.htmlaudio.HTMLAudioInstance#muted\n     */\n    public get muted(): boolean\n    {\n        return this._muted;\n    }\n    public set muted(muted: boolean)\n    {\n        this._muted = muted;\n        this.refresh();\n    }\n\n    /**\n     * Call whenever the loop, speed or volume changes\n     * @method PIXI.sound.htmlaudio.HTMLAudioInstance#refresh\n     */\n    public refresh(): void\n    {\n        const global = this._media.context;\n        const sound = this._media.parent;\n\n        // Update the looping\n        this._source.loop = this._loop || sound.loop;\n\n        // Update the volume\n        const globalVolume = global.volume * (global.muted ? 0 : 1);\n        const soundVolume = sound.volume * (sound.muted ? 0 : 1);\n        const instanceVolume = this._volume * (this._muted ? 0 : 1);\n        this._source.volume = instanceVolume * globalVolume * soundVolume;\n\n        // Update the speed\n        this._source.playbackRate = this._speed * global.speed * sound.speed;\n    }\n\n    /**\n     * Handle changes in paused state, either globally or sound or instance\n     * @method PIXI.sound.htmlaudio.HTMLAudioInstance#refreshPaused\n     */\n    public refreshPaused(): void\n    {\n        const global = this._media.context;\n        const sound = this._media.parent;\n\n        // Handle the paused state\n        const pausedReal = this._paused || sound.paused || global.paused;\n\n        if (pausedReal !== this._pausedReal)\n        {\n            this._pausedReal = pausedReal;\n\n            if (pausedReal)\n            {\n                this._internalStop();\n\n                /**\n                 * The sound is paused.\n                 * @event PIXI.sound.htmlaudio.HTMLAudioInstance#paused\n                 */\n                this.emit(\"paused\");\n            }\n            else\n            {\n                /**\n                 * The sound is unpaused.\n                 * @event PIXI.sound.htmlaudio.HTMLAudioInstance#resumed\n                 */\n                this.emit(\"resumed\");\n\n                // resume the playing with offset\n                this.play({\n                    start: this._source.currentTime,\n                    end: this._end,\n                    volume: this._volume,\n                    speed: this._speed,\n                    loop: this._loop,\n                    wait: this._wait,\n                });\n            }\n\n            /**\n             * The sound is paused or unpaused.\n             * @event PIXI.sound.htmlaudio.HTMLAudioInstance#pause\n             * @property {boolean} paused If the instance was paused or not.\n             */\n            this.emit(\"pause\", pausedReal);\n        }\n    }\n\n    /**\n     * Start playing the sound/\n     * @method PIXI.sound.htmlaudio.HTMLAudioInstance#play\n     */\n    public play(options: PlayOptions): void\n    {\n        const {start, end, speed, loop, volume, muted, wait} = options;\n\n        if (end)\n        {\n            console.assert(end > start, \"End time is before start time\");\n        }\n\n        this._speed = speed;\n        this._volume = volume;\n        this._loop = !!loop;\n        this._muted = muted;\n        this._wait = wait;\n        this.refresh();\n\n        // WebAudio doesn't support looping when a duration is set\n        // we'll set this just for the heck of it\n        if (this.loop && end !== null)\n        {\n            console.warn('Looping not support when specifying an \"end\" time');\n            this.loop = false;\n        }\n\n        this._start = start;\n        this._end = end || this._duration;\n\n        // Lets expand the start and end a little\n        // to deal with the low-latecy of playing audio this way\n        // this is a little fudge-factor\n        this._start = Math.max(0, this._start - HTMLAudioInstance.PADDING);\n        this._end = Math.min(this._end + HTMLAudioInstance.PADDING, this._duration);\n\n        this._source.onloadedmetadata = () => {\n            if (this._source)\n            {\n                this._source.currentTime = start;\n                this._source.onloadedmetadata = null;\n                this.emit(\"progress\", start, this._duration);\n                PIXI.ticker.shared.add(this._onUpdate, this);\n            }\n        };\n        this._source.onended = this._onComplete.bind(this);\n        if (this._wait) {\n            this._waitTimer = window.setTimeout(() => {\n                this._source.play();\n                this._waitTimer = 0;\n                this._wait = 0;\n            }, this._wait * 1000);\n            this._waitStart = Date.now();\n        }\n        else {\n            this._source.play();\n        }\n\n        /**\n         * The sound is started.\n         * @event PIXI.sound.htmlaudio.HTMLAudioInstance#start\n         */\n        this.emit(\"start\");\n    }\n\n    /**\n     * Handle time update on sound.\n     * @method PIXI.sound.htmlaudio.HTMLAudioInstance#_onUpdate\n     * @private\n     */\n    private _onUpdate(): void\n    {\n        this.emit(\"progress\", this.progress, this._duration);\n        if (this._source.currentTime >= this._end && !this._source.loop)\n        {\n            this._onComplete();\n        }\n    }\n\n    /**\n     * Callback when completed.\n     * @method PIXI.sound.htmlaudio.HTMLAudioInstance#_onComplete\n     * @private\n     */\n    private _onComplete(): void\n    {\n        PIXI.ticker.shared.remove(this._onUpdate, this);\n        this._internalStop();\n        this.emit(\"progress\", 1, this._duration);\n        /**\n         * The sound ends, don't use after this\n         * @event PIXI.sound.htmlaudio.HTMLAudioInstance#end\n         */\n        this.emit(\"end\", this);\n    }\n\n    /**\n     * Don't use after this.\n     * @method PIXI.sound.htmlaudio.HTMLAudioInstance#destroy\n     */\n    public destroy(): void\n    {\n        PIXI.ticker.shared.remove(this._onUpdate, this);\n        this.removeAllListeners();\n\n        const source = this._source;\n\n        if (source)\n        {\n            // Remove the listeners\n            source.onended = null;\n            source.onplay = null;\n            source.onpause = null;\n\n            this._internalStop();\n        }\n\n        this._source = null;\n        this._speed = 1;\n        this._volume = 1;\n        this._loop = false;\n        this._end = null;\n        this._start = 0;\n        this._duration = 0;\n        this._playing = false;\n        this._pausedReal = false;\n        this._paused = false;\n        this._muted = false;\n        if (this._waitTimer !== null) {\n            window.clearTimeout(this._waitTimer);\n        }\n        this._wait = 0;\n        this._waitStart = 0;\n        this._waitTimer = null;\n\n        if (this._media)\n        {\n            this._media.context.off(\"refresh\", this.refresh, this);\n            this._media.context.off(\"refreshPaused\", this.refreshPaused, this);\n            this._media = null;\n        }\n    }\n\n    /**\n     * To string method for instance.\n     * @method PIXI.sound.htmlaudio.HTMLAudioInstance#toString\n     * @return {String} The string representation of instance.\n     * @private\n     */\n    public toString(): string\n    {\n        return \"[HTMLAudioInstance id=\" + this.id + \"]\";\n    }\n}\n","import { Filter } from \"../filters/Filter\";\nimport { IMedia } from \"../interfaces/IMedia\";\nimport { CompleteCallback, LoadedCallback, Options, PlayOptions, Sound } from \"../Sound\";\nimport { SoundSpriteData, SoundSprites } from \"../sprites\";\nimport { HTMLAudioContext } from \"./HTMLAudioContext\";\nimport { HTMLAudioInstance } from \"./HTMLAudioInstance\";\n\n/**\n * The fallback version of Sound which uses `<audio>` instead of WebAudio API.\n * @private\n * @class HTMLAudioMedia\n * @memberof PIXI.sound.htmlaudio\n * @param {HTMLAudioElement|String|Object} options Either the path or url to the source file.\n *        or the object of options to use. See {@link PIXI.sound.Sound.from}\n */\nexport class HTMLAudioMedia extends PIXI.utils.EventEmitter implements IMedia\n{\n    public parent: Sound;\n    private _source: HTMLAudioElement;\n\n    public init(parent: Sound): void\n    {\n        this.parent = parent;\n        this._source = parent.options.source as HTMLAudioElement || new Audio();\n        if (parent.url)\n        {\n            this._source.src = parent.url;\n        }\n    }\n\n    // Implement create\n    public create(): HTMLAudioInstance\n    {\n        return new HTMLAudioInstance(this);\n    }\n\n    // Implement isPlayable\n    public get isPlayable(): boolean\n    {\n        return !!this._source && this._source.readyState === 4;\n    }\n\n    // Implement duration\n    public get duration(): number\n    {\n        return this._source.duration;\n    }\n\n    // Implement context\n    public get context(): HTMLAudioContext\n    {\n        return this.parent.context as HTMLAudioContext;\n    }\n\n    // Implement filters\n    public get filters(): Filter[]\n    {\n        return null;\n    }\n    public set filters(filters: Filter[])\n    {\n        console.warn(\"HTML Audio does not support filters\");\n    }\n\n    // Override the destroy\n    public destroy(): void\n    {\n        this.removeAllListeners();\n\n        this.parent = null;\n\n        if (this._source)\n        {\n            this._source.src = \"\";\n            this._source.load();\n            this._source = null;\n        }\n    }\n\n    /**\n     * Get the audio source element.\n     * @name PIXI.sound.legacy.LegacySound#source\n     * @type {HTMLAudioElement}\n     * @readonly\n     */\n    public get source(): HTMLAudioElement\n    {\n        return this._source;\n    }\n\n    // Implement the method to being preloading\n    public load(callback?: LoadedCallback): void\n    {\n        const source = this._source;\n        const sound = this.parent;\n\n        // See if the source is already loaded\n        if (source.readyState === 4)\n        {\n            sound.isLoaded = true;\n            const instance = sound.autoPlayStart();\n            if (callback)\n            {\n                setTimeout(() =>\n                {\n                    callback(null, sound, instance);\n                }, 0);\n            }\n            return;\n        }\n\n        // If there's no source, we cannot load\n        if (!sound.url)\n        {\n            return callback(new Error(\"sound.url or sound.source must be set\"));\n        }\n\n        // Set the source\n        source.src = sound.url;\n\n        // Remove all event listeners\n        const removeListeners = () =>\n        {\n            // Listen for callback\n            source.removeEventListener(\"canplaythrough\", onLoad);\n            source.removeEventListener(\"load\", onLoad);\n            source.removeEventListener(\"abort\", onAbort);\n            source.removeEventListener(\"error\", onError);\n        };\n\n        const onLoad = () =>\n        {\n            removeListeners();\n            sound.isLoaded = true;\n            const instance = sound.autoPlayStart();\n            if (callback)\n            {\n                callback(null, sound, instance);\n            }\n        };\n\n        const onAbort = () =>\n        {\n            removeListeners();\n            if (callback)\n            {\n                callback(new Error(\"Sound loading has been aborted\"));\n            }\n        };\n\n        const onError = () =>\n        {\n            removeListeners();\n            const message = `Failed to load audio element (code: ${source.error.code})`;\n            if (callback)\n            {\n                callback(new Error(message));\n            }\n            else\n            {\n                console.error(message);\n            }\n        };\n\n        // Listen for callback\n        source.addEventListener(\"canplaythrough\", onLoad, false);\n        source.addEventListener(\"load\", onLoad, false);\n        source.addEventListener(\"abort\", onAbort, false);\n        source.addEventListener(\"error\", onError, false);\n\n        // Begin the loading\n        source.load();\n    }\n}\n","import { Filter } from \"../filters/Filter\";\nimport { IMediaContext } from \"../interfaces/IMediaContext\";\n\n/**\n * The fallback version of WebAudioContext which uses `<audio>` instead of WebAudio API.\n * @private\n * @class HTMLAudioContext\n * @extends PIXI.util.EventEmitter\n * @memberof PIXI.sound.htmlaudio\n */\nexport class HTMLAudioContext extends PIXI.utils.EventEmitter implements IMediaContext\n{\n    /**\n     * Current global speed from 0 to 1\n     * @name PIXI.sound.htmlaudio.HTMLAudioContext#speed\n     * @type {number}\n     * @default 1\n     */\n    public speed: number;\n\n    /**\n     * Current muted status of the context\n     * @name PIXI.sound.htmlaudio.HTMLAudioContext#muted\n     * @type {boolean}\n     * @default false\n     */\n    public muted: boolean;\n\n    /**\n     * Current volume from 0 to 1\n     * @name PIXI.sound.htmlaudio.HTMLAudioContext#volume\n     * @type {number}\n     * @default 1\n     */\n    public volume: number;\n\n    /**\n     * Current paused status\n     * @name PIXI.sound.htmlaudio.HTMLAudioContext#paused\n     * @type {boolean}\n     * @default false\n     */\n    public paused: boolean;\n\n    constructor()\n    {\n        super();\n\n        this.speed = 1;\n        this.volume = 1;\n        this.muted = false;\n        this.paused = false;\n    }\n\n    /**\n     * Internal trigger when volume, mute or speed changes\n     * @method PIXI.sound.htmlaudio.HTMLAudioContext#refresh\n     * @private\n     */\n    public refresh(): void\n    {\n        this.emit(\"refresh\");\n    }\n\n    /**\n     * Internal trigger paused changes\n     * @method PIXI.sound.htmlaudio.HTMLAudioContext#refreshPaused\n     * @private\n     */\n    public refreshPaused(): void\n    {\n        this.emit(\"refreshPaused\");\n    }\n\n    /**\n     * HTML Audio does not support filters, this is non-functional API.\n     * @type {Array<PIXI.sound.filters.Filter>}\n     * @name PIXI.sound.htmlaudio.HTMLAudioContext#filters\n     * @default null\n     */\n    public get filters(): Filter[]\n    {\n        console.warn(\"HTML Audio does not support filters\");\n        return null;\n    }\n    public set filters(filters: Filter[])\n    {\n        console.warn(\"HTML Audio does not support filters\");\n    }\n\n    /**\n     * HTML Audio does not support `audioContext`\n     * @type {null}\n     * @name PIXI.sound.htmlaudio.HTMLAudioContext#audioContext\n     * @default null\n     * @readonly\n     */\n    public get audioContext(): AudioContext\n    {\n        console.warn(\"HTML Audio does not support audioContext\");\n        return null;\n    }\n\n    /**\n     * Toggles the muted state.\n     * @method PIXI.sound.htmlaudio.HTMLAudioContext#toggleMute\n     * @return {boolean} The current muted state.\n     */\n    public toggleMute(): boolean\n    {\n        this.muted = !this.muted;\n        this.refresh();\n        return this.muted;\n    }\n\n    /**\n     * Toggles the paused state.\n     * @method PIXI.sound.htmlaudio.HTMLAudioContext#togglePause\n     * @return {boolean} The current paused state.\n     */\n    public togglePause(): boolean\n    {\n        this.paused = !this.paused;\n        this.refreshPaused();\n        return this.paused;\n    }\n\n    /**\n     * Destroy and don't use after this\n     * @method PIXI.sound.htmlaudio.HTMLAudioContext#destroy\n     */\n    public destroy(): void\n    {\n        this.removeAllListeners();\n    }\n}\n","export type ExtensionMap = {[key: string]: boolean};\n\n/**\n * The list of extensions that can be played.\n * @readonly\n * @static\n * @member {string[]} PIXI.sound.utils.extensions\n */\nexport const extensions: string[] = [\n    \"mp3\",\n    \"ogg\",\n    \"oga\",\n    \"opus\",\n    \"mpeg\",\n    \"wav\",\n    \"m4a\",\n    \"aiff\",\n    \"wma\",\n    \"mid\",\n];\n\n/**\n * Internal function to validate file type formats\n * @private\n * @return {object} map of support by type\n */\nfunction validateFormats(): ExtensionMap {\n    const overrides: {[key: string]: string} = {\n        m4a: \"mp4\",\n        oga: \"ogg\",\n    };\n    const audio = document.createElement(\"audio\");\n    const formats: ExtensionMap = {};\n    const no = /^no$/;\n    extensions.forEach((ext) => {\n        const type = overrides[ext] || ext;\n        const canByExt = audio.canPlayType(`audio/${ext}`).replace(no, \"\");\n        const canByType = audio.canPlayType(`audio/${type}`).replace(no, \"\");\n        formats[ext] = !!canByExt || !!canByType;\n    });\n    return Object.freeze(formats);\n}\n\n/**\n * The list of browser supported audio formats.\n * @readonly\n * @static\n * @member {Object} PIXI.sound.utils.supported\n * @property {boolean} mp3 - `true` if file-type is supported\n * @property {boolean} ogg - `true` if file-type is supported\n * @property {boolean} oga - `true` if file-type is supported\n * @property {boolean} opus - `true` if file-type is supported\n * @property {boolean} mpeg - `true` if file-type is supported\n * @property {boolean} wav - `true` if file-type is supported\n * @property {boolean} aiff - `true` if file-type is supported\n * @property {boolean} wma - `true` if file-type is supported\n * @property {boolean} mid - `true` if file-type is supported\n */\nexport const supported = validateFormats();\n","import { supported } from \"./supported\";\n\n/**\n * RegExp for looking for format patterns.\n * @static\n * @private\n */\nconst FORMAT_PATTERN = /\\.(\\{([^\\}]+)\\})(\\?.*)?$/;\n\n/**\n * Resolve a URL with different formats in glob pattern to\n * a path based on the supported browser format. For instance:\n * \"sounds/music.{ogg,mp3}\", would resolve to \"sounds/music.ogg\"\n * if \"ogg\" support is found, otherwise, fallback to \"sounds.music.mp3\"\n * @method PIXI.sound.utils.resolveUrl\n * @static\n * @param {string|PIXI.loaders.Resource} source - Path to resolve or Resource, if\n *        a Resource object is provided, automatically updates the extension and url\n *        of that object.\n * @return {string} The format to resolve to\n */\nexport function resolveUrl(source: string | PIXI.loaders.Resource): string\n{\n    // search for patterns like \".{mp3,ogg}\"\"\n    const glob = FORMAT_PATTERN;\n    const url: string = typeof source === \"string\" ? source : source.url;\n\n    if (!glob.test(url))\n    {\n        return url;\n    }\n    else\n    {\n        const match = glob.exec(url);\n        const exts = match[2].split(\",\");\n        let replace = exts[exts.length - 1]; // fallback to last ext\n        for (let i = 0, len = exts.length; i < len; i++)\n        {\n            const ext = exts[i];\n            if (supported[ext])\n            {\n                replace = ext;\n                break;\n            }\n        }\n        const resolved = url.replace(match[1], replace);\n        if (!(typeof source === \"string\"))\n        {\n            source.extension = replace;\n            source.url = resolved;\n        }\n        return resolved;\n    }\n}\n","import { getInstance } from \"../instance\";\nimport { resolveUrl } from \"../utils/resolveUrl\";\nimport { extensions } from \"../utils/supported\";\n\n/**\n * Sound middleware installation utilities for PIXI.loaders.Loader\n * @class\n * @private\n */\nexport class LoaderMiddleware\n{\n    /**\n     * Install the middleware\n     * @method PIXI.sound.loader.add\n     * @param {PIXI.sound.SoundLibrary} sound - Instance of sound library\n     */\n    public static add()\n    {\n        LoaderMiddleware.legacy = getInstance().useLegacy;\n    }\n\n    /**\n     * Set the legacy mode\n     * @name PIXI.sound.loader.legacy\n     * @type {boolean}\n     * @private\n     */\n    static set legacy(legacy: boolean)\n    {\n        // Configure PIXI Loader to handle audio files correctly\n        const Resource = PIXI.loaders.Resource;\n        const exts = extensions;\n\n        // Make sure we support webaudio\n        if (!legacy)\n        {\n            // Load all audio files as ArrayBuffers\n            exts.forEach((ext) => {\n                Resource.setExtensionXhrType(ext, Resource.XHR_RESPONSE_TYPE.BUFFER);\n                Resource.setExtensionLoadType(ext, Resource.LOAD_TYPE.XHR);\n            });\n        }\n        else\n        {\n            // Fall back to loading as <audio> elements\n            exts.forEach((ext) => {\n                Resource.setExtensionXhrType(ext, Resource.XHR_RESPONSE_TYPE.DEFAULT);\n                Resource.setExtensionLoadType(ext, Resource.LOAD_TYPE.AUDIO);\n            });\n        }\n    }\n\n    /**\n     * Handle the preprocessing of file paths\n     */\n    public static pre(resource: PIXI.loaders.Resource, next: () => void): void\n    {\n        resolveUrl(resource);\n        next();\n    }\n\n    /**\n     * Actual resource-loader middleware for sound class\n     */\n    public static use(resource: PIXI.loaders.Resource, next: () => void): void\n    {\n        if (resource.data && extensions.indexOf(resource.extension) > -1)\n        {\n            (resource as any).sound = getInstance().add(resource.name, {\n                loaded: next,\n                preload: true,\n                url: resource.url,\n                source: resource.data,\n            });\n        }\n        else\n        {\n            next();\n        }\n    }\n}\n","import { LoaderMiddleware } from \"./LoaderMiddleware\";\n\n/**\n * Loader to replace the default PIXI Loader, this will\n * provide support for auto-install `pre`, currently only the `addPixiMiddleware`\n * method only support's **resource-loader's** `use` method.\n * @namespace PIXI.sound.loader\n * @class\n * @private\n */\nexport class Loader extends PIXI.loaders.Loader\n{\n    /**\n     * @param {string} [baseUrl=''] - The base url for all resources loaded by this loader.\n     * @param {number} [concurrency=10] - The number of resources to load concurrently.\n     */\n    constructor(baseUrl?: string, concurrency?: number)\n    {\n        super(baseUrl, concurrency);\n\n        this.use(LoaderMiddleware.use);\n        this.pre(LoaderMiddleware.pre);\n    }\n\n    /**\n     * Adds a default middleware to the PixiJS loader.\n     *\n     * @static\n     * @param {Function} fn - The middleware to add.\n     */\n    public static addPixiMiddleware(fn: () => void): void\n    {\n        super.addPixiMiddleware(fn);\n    }\n}\n","import { IMediaInstance } from \"../interfaces\";\nimport { CompleteCallback, Sound } from \"../Sound\";\n\n// Sound sprite data setup\nexport interface SoundSpriteData {\n    start: number;\n    end: number;\n    speed?: number;\n}\n\n// Collection of sound sprites\nexport type SoundSprites = {[id: string]: SoundSprite};\n\n/**\n * Object that represents a single Sound's sprite.\n * @class SoundSprite\n * @memberof PIXI.sound\n * @param {PIXI.sound.Sound} parent The parent sound\n * @param {Object} options Data associated with object.\n * @param {number} options.start The start time in seconds.\n * @param {number} options.end The end time in seconds.\n * @param {number} [options.speed] The optional speed, if not speed, uses\n *        the default speed of the parent.\n */\nexport class SoundSprite\n{\n    /**\n     * The reference sound\n     * @name PIXI.sound.SoundSprite#parent\n     * @type {PIXI.sound.Sound}\n     * @readonly\n     */\n    public parent: Sound;\n\n    /**\n     * The starting location in seconds.\n     * @name PIXI.sound.SoundSprite#start\n     * @type {number}\n     * @readonly\n     */\n    public start: number;\n\n    /**\n     * The ending location in seconds\n     * @name PIXI.sound.SoundSprite#end\n     * @type {number}\n     * @readonly\n     */\n    public end: number;\n\n    /**\n     * The speed override where 1 is 100% speed playback.\n     * @name PIXI.sound.SoundSprite#speed\n     * @type {number}\n     * @readonly\n     */\n    public speed: number;\n\n    /**\n     * The duration of the sound in seconds.\n     * @name PIXI.sound.SoundSprite#duration\n     * @type {number}\n     * @readonly\n     */\n    public duration: number;\n\n    /**\n     * Whether to loop the sound sprite.\n     * @name PIXI.sound.SoundSprite#loop\n     * @type {boolean}\n     * @readonly\n     */\n    public loop: boolean;\n\n    /**\n     * Constructor\n     */\n    constructor(parent: Sound, options: SoundSpriteData)\n    {\n        this.parent = parent;\n        Object.assign(this, options);\n        this.duration = this.end - this.start;\n\n        console.assert(this.duration > 0, \"End time must be after start time\");\n    }\n\n    /**\n     * Play the sound sprite.\n     * @method PIXI.sound.SoundSprite#play\n     * @param {PIXI.sound.Sound~completeCallback} [complete] Function call when complete\n     * @return {PIXI.sound.IMediaInstance|Promise<PIXI.sound.IMediaInstance>} Sound instance being played.\n     */\n    public play(complete?: CompleteCallback): IMediaInstance | Promise<IMediaInstance>\n    {\n        return this.parent.play({\n            complete,\n            speed: this.speed || this.parent.speed,\n            end: this.end,\n            start: this.start,\n            loop: this.loop});\n    }\n\n    /**\n     * Destroy and don't use after this\n     * @method PIXI.sound.SoundSprite#destroy\n     */\n    public destroy(): void\n    {\n        this.parent = null;\n    }\n}\n","import { Filter } from \"./filters\";\nimport { HTMLAudioMedia } from \"./htmlaudio\";\nimport { getInstance } from \"./instance\";\nimport { IMedia, IMediaContext, IMediaInstance } from \"./interfaces\";\nimport { SoundSprite, SoundSpriteData, SoundSprites } from \"./sprites\";\nimport { resolveUrl } from \"./utils/resolveUrl\";\nimport { WebAudioMedia } from \"./webaudio\";\n\n// Constructor options\nexport interface Options {\n    autoPlay?: boolean;\n    singleInstance?: boolean;\n    volume?: number;\n    speed?: number;\n    complete?: CompleteCallback;\n    loaded?: LoadedCallback;\n    preload?: boolean;\n    loop?: boolean;\n    url?: string;\n    source?: ArrayBuffer | HTMLAudioElement;\n    sprites?: {[id: string]: SoundSpriteData};\n}\n\n// Interface for play options\nexport interface PlayOptions {\n    start?: number;\n    end?: number;\n    speed?: number;\n    loop?: boolean;\n    volume?: number;\n    sprite?: string;\n    muted?: boolean;\n    complete?: CompleteCallback;\n    loaded?: LoadedCallback;\n    wait?: number;\n}\n\n/**\n * Callback when sound is loaded.\n * @callback PIXI.sound.Sound~loadedCallback\n * @param {Error} err The callback error.\n * @param {PIXI.sound.Sound} sound The instance of new sound.\n * @param {PIXI.sound.IMediaInstance} instance The instance of auto-played sound.\n */\nexport declare type LoadedCallback = (err: Error, sound?: Sound, instance?: IMediaInstance) => void;\n\n/**\n * Callback when sound is completed.\n * @callback PIXI.sound.Sound~completeCallback\n * @param {PIXI.sound.Sound} sound The instance of sound.\n */\nexport declare type CompleteCallback = (sound: Sound) => void;\n\n/**\n * Sound represents a single piece of loaded media. When playing a sound {@link PIXI.sound.IMediaInstance} objects\n * are created. Properties such a `volume`, `pause`, `mute`, `speed`, etc will have an effect on all instances.\n * @class Sound\n * @memberof PIXI.sound\n */\nexport class Sound\n{\n    /**\n     * Pool of instances\n     * @name PIXI.sound.Sound#_pool\n     * @type {Array<IMediaInstance>}\n     * @private\n     */\n    private static _pool: IMediaInstance[] = [];\n\n    /**\n     * `true` if the buffer is loaded.\n     * @name PIXI.sound.Sound#isLoaded\n     * @type {boolean}\n     * @default false\n     */\n    public isLoaded: boolean;\n\n    /**\n     * `true` if the sound is currently being played.\n     * @name PIXI.sound.Sound#isPlaying\n     * @type {boolean}\n     * @default false\n     * @readonly\n     */\n    public isPlaying: boolean;\n\n    /**\n     * true to start playing immediate after load.\n     * @name PIXI.sound.Sound#autoPlay\n     * @type {boolean}\n     * @default false\n     * @readonly\n     */\n    public autoPlay: boolean;\n\n    /**\n     * `true` to disallow playing multiple layered instances at once.\n     * @name PIXI.sound.Sound#singleInstance\n     * @type {boolean}\n     * @default false\n     */\n    public singleInstance: boolean;\n\n    /**\n     * `true` to immediately start preloading.\n     * @name PIXI.sound.Sound#preload\n     * @type {boolean}\n     * @default false\n     * @readonly\n     */\n    public preload: boolean;\n\n    /**\n     * The file source to load.\n     * @name PIXI.sound.Sound#url\n     * @type {String}\n     * @readonly\n     */\n    public url: string;\n\n    /**\n     * The constructor options.\n     * @name PIXI.sound.Sound#options\n     * @type {Object}\n     * @readonly\n     */\n    public options: Options;\n\n    /**\n     * The audio source\n     * @name PIXI.sound.Sound#media\n     * @type {PIXI.sound.IMedia}\n     * @private\n     */\n    public media: IMedia;\n\n    /**\n     * The collection of instances being played.\n     * @name PIXI.sound.Sound#_instances\n     * @type {Array<IMediaInstance>}\n     * @private\n     */\n    private _instances: IMediaInstance[];\n\n    /**\n     * Reference to the sound context.\n     * @name PIXI.sound.Sound#_sprites\n     * @type {SoundContext}\n     * @private\n     */\n    private _sprites: SoundSprites;\n\n    /**\n     * The options when auto-playing.\n     * @name PIXI.sound.Sound#_autoPlayOptions\n     * @type {PlayOptions}\n     * @private\n     */\n    private _autoPlayOptions: PlayOptions;\n\n    /**\n     * The internal volume.\n     * @name PIXI.sound.Sound#_volume\n     * @type {number}\n     * @private\n     */\n    private _volume: number;\n\n    /**\n     * The internal paused state.\n     * @name PIXI.sound.Sound#_paused\n     * @type {boolean}\n     * @private\n     */\n    private _paused: boolean;\n\n    /**\n     * The internal muted state.\n     * @name PIXI.sound.Sound#_muted\n     * @type {boolean}\n     * @private\n     */\n    private _muted: boolean;\n\n    /**\n     * The internal volume.\n     * @name PIXI.sound.Sound#_loop\n     * @type {boolean}\n     * @private\n     */\n    private _loop: boolean;\n\n    /**\n     * The internal playbackRate\n     * @name PIXI.sound.Sound#_speed\n     * @type {number}\n     * @private\n     */\n    private _speed: number;\n\n    /**\n     * Create a new sound instance from source.\n     * @method PIXI.sound.Sound.from\n     * @param {ArrayBuffer|String|Object|HTMLAudioElement} options Either the path or url to the source file.\n     *        or the object of options to use.\n     * @param {String} [options.url] If `options` is an object, the source of file.\n     * @param {HTMLAudioElement|ArrayBuffer} [options.source] The source, if already preloaded.\n     * @param {boolean} [options.autoPlay=false] true to play after loading.\n     * @param {boolean} [options.preload=false] true to immediately start preloading.\n     * @param {boolean} [options.singleInstance=false] `true` to disallow playing multiple layered instances at once.\n     * @param {number} [options.volume=1] The amount of volume 1 = 100%.\n     * @param {number} [options.speed=1] The playback rate where 1 is 100% speed.\n     * @param {Object} [options.sprites] The map of sprite data. Where a sprite is an object\n     *        with a `start` and `end`, which are the times in seconds. Optionally, can include\n     *        a `speed` amount where 1 is 100% speed.\n     * @param {PIXI.sound.Sound~completeCallback} [options.complete=null] Global complete callback\n     *        when play is finished.\n     * @param {PIXI.sound.Sound~loadedCallback} [options.loaded=null] Call when finished loading.\n     * @param {boolean} [options.loop=false] true to loop the audio playback.\n     * @return {PIXI.sound.Sound} Created sound instance.\n     */\n    public static from(source: string | Options | ArrayBuffer | HTMLAudioElement): Sound\n    {\n        let options: Options = {};\n\n        if (typeof source === \"string\")\n        {\n            options.url = source as string;\n        }\n        else if (source instanceof ArrayBuffer || source instanceof HTMLAudioElement)\n        {\n            options.source = source;\n        }\n        else\n        {\n            options = source;\n        }\n\n        // Default settings\n        options = {\n            autoPlay: false,\n            singleInstance: false,\n            url: null,\n            source: null,\n            preload: false,\n            volume: 1,\n            speed: 1,\n            complete: null,\n            loaded: null,\n            loop: false, ...options};\n\n        // Resolve url in-case it has a special format\n        if (options.url)\n        {\n            options.url = resolveUrl(options.url);\n        }\n\n        Object.freeze(options);\n\n        const media: IMedia = getInstance().useLegacy ?\n            new HTMLAudioMedia() :\n            new WebAudioMedia();\n\n        return new Sound(media, options);\n    }\n\n    /**\n     * Constructor, use `PIXI.sound.Sound.from`\n     * @private\n     */\n    constructor(media: IMedia, options: Options)\n    {\n        this.media = media;\n        this.options = options;\n        this._instances = [];\n        this._sprites = {};\n\n        this.media.init(this);\n\n        const complete = options.complete;\n        this._autoPlayOptions = complete ? { complete } : null;\n        this.isLoaded = false;\n        this.isPlaying = false;\n        this.autoPlay = options.autoPlay;\n        this.singleInstance = options.singleInstance;\n        this.preload = options.preload || this.autoPlay;\n        this.url = options.url;\n        this.speed = options.speed;\n        this.volume = options.volume;\n        this.loop = options.loop;\n\n        if (options.sprites)\n        {\n            this.addSprites(options.sprites);\n        }\n\n        if (this.preload)\n        {\n            this._preload(options.loaded);\n        }\n    }\n\n    /**\n     * Instance of the media context\n     * @name PIXI.sound.Sound#context\n     * @type {PIXI.sound.IMediaContext}\n     * @readonly\n     */\n    public get context(): IMediaContext\n    {\n        return getInstance().context;\n    }\n\n    /**\n     * Stops all the instances of this sound from playing.\n     * @method PIXI.sound.Sound#pause\n     * @return {PIXI.sound.Sound} Instance of this sound.\n     */\n    public pause(): Sound\n    {\n        this.isPlaying = false;\n        this.paused = true;\n        return this;\n    }\n\n    /**\n     * Resuming all the instances of this sound from playing\n     * @method PIXI.sound.Sound#resume\n     * @return {PIXI.sound.Sound} Instance of this sound.\n     */\n    public resume(): Sound\n    {\n        this.isPlaying = this._instances.length > 0;\n        this.paused = false;\n        return this;\n    }\n\n    /**\n     * Stops all the instances of this sound from playing.\n     * @name PIXI.sound.Sound#paused\n     * @type {boolean}\n     * @readonly\n     */\n    public get paused(): boolean\n    {\n        return this._paused;\n    }\n    public set paused(paused: boolean)\n    {\n        this._paused = paused;\n        this.refreshPaused();\n    }\n\n    /**\n     * The playback rate\n     * @name PIXI.sound.Sound#speed\n     * @type {number}\n     */\n    public get speed(): number\n    {\n        return this._speed;\n    }\n    public set speed(speed: number)\n    {\n        this._speed = speed;\n        this.refresh();\n    }\n\n    /**\n     * Set the filters. Only supported with WebAudio.\n     * @name PIXI.sound.Sound#filters\n     * @type {Array<PIXI.sound.filters.Filter>}\n     */\n    public get filters(): Filter[]\n    {\n        return this.media.filters;\n    }\n    public set filters(filters: Filter[])\n    {\n        this.media.filters = filters;\n    }\n\n    /**\n     * Add a sound sprite, which is a saved instance of a longer sound.\n     * Similar to an image spritesheet.\n     * @method PIXI.sound.Sound#addSprites\n     * @param {String} alias The unique name of the sound sprite.\n     * @param {object} data Either completed function or play options.\n     * @param {number} data.start Time when to play the sound in seconds.\n     * @param {number} data.end Time to end playing in seconds.\n     * @param {number} [data.speed] Override default speed, default to the Sound's speed setting.\n     * @return {PIXI.sound.SoundSprite} Sound sprite result.\n     */\n    public addSprites(alias: string, data: SoundSpriteData): SoundSprite;\n\n    /**\n     * Convenience method to add more than one sprite add a time.\n     * @method PIXI.sound.Sound#addSprites\n     * @param {Object} data Map of sounds to add where the key is the alias,\n     *        and the data are configuration options, see {@PIXI.sound.Sound#addSprite} for info on data.\n     * @return {Object} The map of sound sprites added.\n     */\n    public addSprites(sprites: {[id: string]: SoundSpriteData}): SoundSprites;\n\n    // Actual implementation\n    public addSprites(\n        source: string | {[id: string]: SoundSpriteData},\n        data?: SoundSpriteData): SoundSprite | SoundSprites\n    {\n        if (typeof source === \"object\")\n        {\n            const results: SoundSprites = {};\n            for (const alias in source)\n            {\n                results[alias] = this.addSprites(alias, source[alias]);\n            }\n            return results;\n        }\n        else if (typeof source === \"string\")\n        {\n            // tslint:disable-next-line no-console\n            console.assert(!this._sprites[source], `Alias ${source} is already taken`);\n            const sprite = new SoundSprite(this, data);\n            this._sprites[source] = sprite;\n            return sprite;\n        }\n    }\n\n    /**\n     * Destructor, safer to use `SoundLibrary.remove(alias)` to remove this sound.\n     * @method PIXI.sound.Sound#destroy\n     */\n    public destroy(): void\n    {\n        this._removeInstances();\n        this.removeSprites();\n        this.media.destroy();\n        this.media = null;\n        this._sprites = null;\n        this._instances = null;\n    }\n\n    /**\n     * Remove all sound sprites.\n     * @method PIXI.sound.Sound#removeSprites\n     * @return {PIXI.sound.Sound} Sound instance for chaining.\n     */\n\n    /**\n     * Remove a sound sprite.\n     * @method PIXI.sound.Sound#removeSprites\n     * @param {String} alias The unique name of the sound sprite.\n     * @return {PIXI.sound.Sound} Sound instance for chaining.\n     */\n    public removeSprites(alias?: string): Sound\n    {\n        if (!alias)\n        {\n            for (const name in this._sprites)\n            {\n                this.removeSprites(name);\n            }\n        }\n        else\n        {\n            const sprite: SoundSprite = this._sprites[alias];\n\n            if (sprite !== undefined)\n            {\n                sprite.destroy();\n                delete this._sprites[alias];\n            }\n        }\n        return this;\n    }\n\n    /**\n     * If the current sound is playable (loaded).\n     * @name PIXI.sound.Sound#isPlayable\n     * @type {boolean}\n     * @readonly\n     */\n    public get isPlayable(): boolean\n    {\n        return this.isLoaded && this.media && this.media.isPlayable;\n    }\n\n    /**\n     * Stops all the instances of this sound from playing.\n     * @method PIXI.sound.Sound#stop\n     * @return {PIXI.sound.Sound} Instance of this sound.\n     */\n    public stop(): Sound\n    {\n        if (!this.isPlayable)\n        {\n            this.autoPlay = false;\n            this._autoPlayOptions = null;\n            return this;\n        }\n        this.isPlaying = false;\n\n        // Go in reverse order so we don't skip items\n        for (let i = this._instances.length - 1; i >= 0; i--)\n        {\n            this._instances[i].stop();\n        }\n        return this;\n    }\n\n    /**\n     * Play a sound sprite, which is a saved instance of a longer sound.\n     * Similar to an image spritesheet.\n     * @method PIXI.sound.Sound#play\n     * @param {String} alias The unique name of the sound sprite.\n     * @param {object} data Either completed function or play options.\n     * @param {number} data.start Time when to play the sound in seconds.\n     * @param {number} data.end Time to end playing in seconds.\n     * @param {number} [data.speed] Override default speed, default to the Sound's speed setting.\n     * @param {PIXI.sound.Sound~completeCallback} [callback] Callback when completed.\n     * @return {PIXI.sound.IMediaInstance|Promise<PIXI.sound.IMediaInstance>} The sound instance,\n     *        this cannot be reused after it is done playing. Returns a Promise if the sound\n     *        has not yet loaded.\n     */\n    public play(alias: string, callback?: CompleteCallback): IMediaInstance | Promise<IMediaInstance>;\n\n    /**\n     * Plays the sound.\n     * @method PIXI.sound.Sound#play\n     * @param {PIXI.sound.Sound~completeCallback|object} options Either completed function or play options.\n     * @param {number} [options.start=0] Time when to play the sound in seconds.\n     * @param {number} [options.end] Time to end playing in seconds.\n     * @param {String} [options.sprite] Play a named sprite. Will override end, start and speed options.\n     * @param {number} [options.speed] Override default speed, default to the Sound's speed setting.\n     * @param {number} [options.volume] Current volume amount for instance.\n     * @param {boolean} [options.muted] Override default muted, default to the Sound's muted setting.\n     * @param {boolean} [options.loop] Override default loop, default to the Sound's loop setting.\n     * @param {number} [options.wait] Delay in seconds before starting playback\n     * @param {PIXI.sound.Sound~completeCallback} [options.complete] Callback when complete.\n     * @param {PIXI.sound.Sound~loadedCallback} [options.loaded] If the sound isn't already preloaded, callback when\n     *        the audio has completely finished loading and decoded.\n     * @return {PIXI.sound.IMediaInstance|Promise<PIXI.sound.IMediaInstance>} The sound instance,\n     *        this cannot be reused after it is done playing. Returns a Promise if the sound\n     *        has not yet loaded.\n     */\n    public play(source?: string | PlayOptions | CompleteCallback,\n                callback?: CompleteCallback): IMediaInstance | Promise<IMediaInstance>;\n\n    // Overloaded function\n    public play(source?: any, complete?: CompleteCallback): IMediaInstance | Promise<IMediaInstance>\n    {\n        let options: PlayOptions;\n\n        if (typeof source === \"string\")\n        {\n            const sprite: string = source as string;\n            options = { sprite, loop: this.loop, complete };\n        }\n        else if (typeof source === \"function\")\n        {\n            options = {};\n            options.complete = source as CompleteCallback;\n        }\n        else\n        {\n            options = source as PlayOptions;\n        }\n\n        options = {\n            complete: null,\n            loaded: null,\n            sprite: null,\n            end: null,\n            start: 0,\n            volume: 1,\n            speed: 1,\n            muted: false,\n            loop: false, ...(options || {})};\n\n        // A sprite is specified, add the options\n        if (options.sprite)\n        {\n            const alias: string = options.sprite;\n            // tslint:disable-next-line no-console\n            console.assert(!!this._sprites[alias], `Alias ${alias} is not available`);\n            const sprite: SoundSprite = this._sprites[alias];\n            options.start = sprite.start;\n            options.end = sprite.end;\n            options.speed = sprite.speed || 1;\n            options.loop = sprite.loop || options.loop;\n            delete options.sprite;\n        }\n\n        // @deprecated offset option\n        if ((options as any).offset) {\n            options.start = (options as any).offset as number;\n        }\n\n        // if not yet playable, ignore\n        // - usefull when the sound download isnt yet completed\n        if (!this.isLoaded)\n        {\n            return new Promise<IMediaInstance>((resolve, reject) =>\n            {\n                this.autoPlay = true;\n                this._autoPlayOptions = options;\n                this._preload((err: Error, sound: Sound, media: IMediaInstance) =>\n                {\n                    if (err)\n                    {\n                        reject(err);\n                    }\n                    else\n                    {\n                        if (options.loaded)\n                        {\n                            options.loaded(err, sound, media);\n                        }\n                        resolve(media);\n                    }\n                });\n            });\n        }\n\n        // Stop all sounds\n        if (this.singleInstance)\n        {\n            this._removeInstances();\n        }\n\n        // clone the bufferSource\n        const instance = this._createInstance();\n        this._instances.push(instance);\n        this.isPlaying = true;\n        instance.once(\"end\", () => {\n            if (options.complete)\n            {\n                options.complete(this);\n            }\n            this._onComplete(instance);\n        });\n        instance.once(\"stop\", () => {\n            this._onComplete(instance);\n        });\n\n        instance.play(options);\n\n        return instance;\n    }\n\n    /**\n     * Internal only, speed, loop, volume change occured.\n     * @method refresh\n     * @private\n     */\n    public refresh(): void\n    {\n        const len = this._instances.length;\n        for (let i = 0; i < len; i++)\n        {\n            this._instances[i].refresh();\n        }\n    }\n\n    /**\n     * Handle changes in paused state. Internal only.\n     * @method refreshPaused\n     * @private\n     */\n    public refreshPaused(): void\n    {\n        const len = this._instances.length;\n        for (let i = 0; i < len; i++)\n        {\n            this._instances[i].refreshPaused();\n        }\n    }\n\n    /**\n     * Gets and sets the volume.\n     * @name PIXI.sound.Sound#volume\n     * @type {number}\n     */\n    public get volume(): number\n    {\n        return this._volume;\n    }\n    public set volume(volume: number)\n    {\n        this._volume = volume;\n        this.refresh();\n    }\n\n    /**\n     * Gets and sets the muted flag.\n     * @name PIXI.sound.Sound#muted\n     * @type {number}\n     */\n    public get muted(): boolean\n    {\n        return this._muted;\n    }\n    public set muted(muted: boolean)\n    {\n        this._muted = muted;\n        this.refresh();\n    }\n\n    /**\n     * Gets and sets the looping.\n     * @name PIXI.sound.Sound#loop\n     * @type {boolean}\n     */\n    public get loop(): boolean\n    {\n        return this._loop;\n    }\n    public set loop(loop: boolean)\n    {\n        this._loop = loop;\n        this.refresh();\n    }\n\n    /**\n     * Starts the preloading of sound.\n     * @method PIXI.sound.Sound#_preload\n     * @private\n     */\n    private _preload(callback?: LoadedCallback): void\n    {\n        this.media.load(callback);\n    }\n\n    /**\n     * Gets the list of instances that are currently being played of this sound.\n     * @name PIXI.sound.Sound#instances\n     * @type {Array<PIXI.sound.IMediaInstance>}\n     * @readonly\n     */\n    public get instances(): IMediaInstance[]\n    {\n        return this._instances;\n    }\n\n    /**\n     * Get the map of sprites.\n     * @name PIXI.sound.Sound#sprites\n     * @type {Object}\n     * @readonly\n     */\n    public get sprites(): SoundSprites\n    {\n        return this._sprites;\n    }\n\n    /**\n     * Get the duration of the audio in seconds.\n     * @name PIXI.sound.Sound#duration\n     * @type {number}\n     */\n    public get duration(): number\n    {\n        return this.media.duration;\n    }\n\n    /**\n     * Auto play the first instance.\n     * @method PIXI.sound.Sound#autoPlayStart\n     * @private\n     */\n    public autoPlayStart(): IMediaInstance\n    {\n        let instance: IMediaInstance;\n        if (this.autoPlay)\n        {\n            instance = this.play(this._autoPlayOptions) as IMediaInstance;\n        }\n        return instance;\n    }\n\n    /**\n     * Removes all instances.\n     * @method PIXI.sound.Sound#_removeInstances\n     * @private\n     */\n    private _removeInstances(): void\n    {\n        // destroying also stops\n        for (let i = this._instances.length - 1; i >= 0; i--)\n        {\n            this._poolInstance(this._instances[i]);\n        }\n        this._instances.length = 0;\n    }\n\n    /**\n     * Sound instance completed.\n     * @method PIXI.sound.Sound#_onComplete\n     * @private\n     * @param {PIXI.sound.IMediaInstance} instance\n     */\n    private _onComplete(instance: IMediaInstance): void\n    {\n        if (this._instances)\n        {\n            const index = this._instances.indexOf(instance);\n            if (index > -1)\n            {\n                this._instances.splice(index, 1);\n            }\n            this.isPlaying = this._instances.length > 0;\n        }\n        this._poolInstance(instance);\n    }\n\n    /**\n     * Create a new instance.\n     * @method PIXI.sound.Sound#_createInstance\n     * @private\n     * @return {PIXI.sound.IMediaInstance} New instance to use\n     */\n    private _createInstance(): IMediaInstance\n    {\n        if (Sound._pool.length > 0)\n        {\n            const instance: IMediaInstance = Sound._pool.pop();\n            instance.init(this.media);\n            return instance;\n        }\n        return this.media.create();\n    }\n\n    /**\n     * Destroy/recycling the instance object.\n     * @method PIXI.sound.Sound#_poolInstance\n     * @private\n     * @param {PIXI.sound.IMediaInstance} instance - Instance to recycle\n     */\n    private _poolInstance(instance: IMediaInstance): void\n    {\n        instance.destroy();\n        // Add it if it isn't already added\n        if (Sound._pool.indexOf(instance) < 0)\n        {\n            Sound._pool.push(instance);\n        }\n    }\n}\n","import { Filterable } from \"./Filterable\";\nimport { Filter } from \"./filters\";\nimport * as htmlaudio from \"./htmlaudio\";\nimport { getInstance } from \"./instance\";\nimport { IMediaContext, IMediaInstance } from \"./interfaces\";\nimport { LoaderMiddleware } from \"./loader\";\nimport { CompleteCallback, Options, PlayOptions, Sound } from \"./Sound\";\nimport * as webaudio from \"./webaudio\";\n\nexport type SoundMap = {[id: string]: Options | string | ArrayBuffer | HTMLAudioElement};\n\n/**\n * Contains all of the functionality for using the **pixi-sound** library.\n * This is deisnged to play audio with WebAudio and fallback to HTML5.\n * @namespace PIXI.sound\n */\n\n/**\n * @description Manages the playback of sounds.\n * @class SoundLibrary\n * @memberof PIXI.sound\n * @private\n */\nexport class SoundLibrary\n{\n    /**\n     * For legacy approach for Audio. Instead of using WebAudio API\n     * for playback of sounds, it will use HTML5 `<audio>` element.\n     * @name PIXI.sound#_useLegacy\n     * @type {boolean}\n     * @default false\n     * @private\n     */\n    private _useLegacy: boolean;\n\n    /**\n     * The global context to use.\n     * @name PIXI.sound#_context\n     * @type {PIXI.sound.webaudio.WebAudioContext}\n     * @private\n     */\n    private _context: IMediaContext;\n\n    /**\n     * The WebAudio specific context\n     * @name PIXI.sound#_webAudioContext\n     * @type {PIXI.sound.webaudio.WebAudioContext}\n     * @private\n     */\n    private _webAudioContext: webaudio.WebAudioContext;\n\n    /**\n     * The HTML Audio (legacy) context.\n     * @name PIXI.sound#_htmlAudioContext\n     * @type {PIXI.sound.webaudio.WebAudioContext}\n     * @private\n     */\n    private _htmlAudioContext: htmlaudio.HTMLAudioContext;\n\n    /**\n     * The map of all sounds by alias.\n     * @name PIXI.sound#_sounds\n     * @type {Object}\n     * @private\n     */\n    private _sounds: {[id: string]: Sound};\n\n    constructor()\n    {\n        this.init();\n    }\n\n    /**\n     * Re-initialize the sound library, this will\n     * recreate the AudioContext. If there's a hardware-failure\n     * call `close` and then `init`.\n     * @method PIXI.sound#init\n     * @return {PIXI.sound} Sound instance\n     */\n    public init(): SoundLibrary\n    {\n        if (this.supported)\n        {\n            this._webAudioContext = new webaudio.WebAudioContext();\n        }\n        this._htmlAudioContext = new htmlaudio.HTMLAudioContext();\n        this._sounds = {};\n        this.useLegacy = !this.supported;\n        return this;\n    }\n\n    /**\n     * The global context to use.\n     * @name PIXI.sound#context\n     * @readonly\n     * @type {PIXI.sound.IMediaContext}\n     */\n    public get context(): IMediaContext\n    {\n        return this._context;\n    }\n\n    /**\n     * Apply filters to all sounds. Can be useful\n     * for setting global planning or global effects.\n     * **Only supported with WebAudio.**\n     * @example\n     * // Adds a filter to pan all output left\n     * PIXI.sound.filtersAll = [\n     *     new PIXI.sound.filters.StereoFilter(-1)\n     * ];\n     * @name PIXI.sound#filtersAll\n     * @type {PIXI.sound.filters.Filter[]}\n     */\n    public get filtersAll(): Filter[]\n    {\n        if (!this.useLegacy)\n        {\n            return this._context.filters;\n        }\n        return [];\n    }\n    public set filtersAll(filtersAll: Filter[])\n    {\n        if (!this.useLegacy)\n        {\n            this._context.filters = filtersAll;\n        }\n    }\n\n    /**\n     * `true` if WebAudio is supported on the current browser.\n     * @name PIXI.sound#supported\n     * @readonly\n     * @type {boolean}\n     */\n    public get supported(): boolean\n    {\n        return webaudio.WebAudioContext.AudioContext !== null;\n    }\n\n    /**\n     * Register an existing sound with the library cache.\n     * @method PIXI.sound#add\n     * @param {String} alias The sound alias reference.\n     * @param {PIXI.sound.Sound} sound Sound reference to use.\n     * @return {PIXI.sound.Sound} Instance of the Sound object.\n     */\n\n    /**\n     * Adds a new sound by alias.\n     * @method PIXI.sound#add\n     * @param {String} alias The sound alias reference.\n     * @param {ArrayBuffer|String|Object|HTMLAudioElement} options Either the path or url to the source file.\n     *        or the object of options to use.\n     * @param {String} [options.url] If `options` is an object, the source of file.\n     * @param {ArrayBuffer|HTMLAudioElement} [options.source] If sound is already preloaded, available.\n     * @param {boolean} [options.autoPlay=false] true to play after loading.\n     * @param {boolean} [options.preload=false] true to immediately start preloading.\n     * @param {boolean} [options.singleInstance=false] `true` to disallow playing multiple layered instances at once.\n     * @param {number} [options.volume=1] The amount of volume 1 = 100%.\n     * @param {number} [options.speed=1] The playback rate where 1 is 100% speed.\n     * @param {Object} [options.sprites] The map of sprite data. Where a sprite is an object\n     *        with a `start` and `end`, which are the times in seconds. Optionally, can include\n     *        a `speed` amount where 1 is 100% speed.\n     * @param {PIXI.sound.Sound~completeCallback} [options.complete=null] Global complete callback when\n     *        play is finished.\n     * @param {PIXI.sound.Sound~loadedCallback} [options.loaded=null] Call when finished loading.\n     * @return {PIXI.sound.Sound} Instance of the Sound object.\n     */\n    public add(alias: string, options: Options | string | ArrayBuffer | HTMLAudioElement | Sound): Sound;\n\n    /**\n     * Adds multiple sounds at once.\n     * @method PIXI.sound#add\n     * @param {Object} map Map of sounds to add, the key is the alias, the value is the\n     *        `string`, `ArrayBuffer`, `HTMLAudioElement` or the list of options\n     *        (see {@link PIXI.sound.add} for options).\n     * @param {Object} globalOptions The default options for all sounds.\n     *        if a property is defined, it will use the local property instead.\n     * @return {PIXI.sound.Sound} Instance to the Sound object.\n     */\n    public add(map: SoundMap, globalOptions?: Options): {[id: string]: Sound};\n\n    // Actual method\n    public add(source: string | SoundMap, sourceOptions?: Options | string | ArrayBuffer | HTMLAudioElement | Sound):\n        {[id: string]: Sound} | Sound\n    {\n        if (typeof source === \"object\")\n        {\n            const results: {[id: string]: Sound} = {};\n\n            for (const alias in source)\n            {\n                const options: Options = this._getOptions(\n                    source[alias],\n                    sourceOptions as Options,\n                );\n                results[alias] = this.add(alias, options);\n            }\n            return results;\n        }\n        else if (typeof source === \"string\")\n        {\n            // tslint:disable-next-line no-console\n            console.assert(!this._sounds[source], `Sound with alias ${source} already exists.`);\n\n            if (sourceOptions instanceof Sound)\n            {\n                this._sounds[source] = sourceOptions;\n                return sourceOptions;\n            }\n            else\n            {\n                const options: Options = this._getOptions(sourceOptions);\n                const sound: Sound = Sound.from(options);\n                this._sounds[source] = sound;\n                return sound;\n            }\n        }\n    }\n\n    /**\n     * Internal methods for getting the options object\n     * @method PIXI.sound#_getOptions\n     * @private\n     * @param {string|ArrayBuffer|HTMLAudioElement|Object} source The source options\n     * @param {Object} [overrides] Override default options\n     * @return {Object} The construction options\n     */\n    private _getOptions(source: string | ArrayBuffer | HTMLAudioElement | Options, overrides?: Options): Options\n    {\n        let options: Options;\n\n        if (typeof source === \"string\")\n        {\n            options = { url: source };\n        }\n        else if (source instanceof ArrayBuffer || source instanceof HTMLAudioElement)\n        {\n            options = { source };\n        }\n        else\n        {\n            options = source as Options;\n        }\n        options = {...options, ...(overrides || {})};\n\n        return options;\n    }\n\n    /**\n     * Do not use WebAudio, force the use of legacy. This **must** be called before loading any files.\n     * @name PIXI.sound#useLegacy\n     * @type {boolean}\n     */\n    public get useLegacy(): boolean\n    {\n        return this._useLegacy;\n    }\n    public set useLegacy(legacy: boolean)\n    {\n        LoaderMiddleware.legacy = legacy;\n        this._useLegacy = legacy;\n\n        // Set the context to use\n        this._context = (!legacy && this.supported) ?\n            this._webAudioContext :\n            this._htmlAudioContext;\n    }\n\n    /**\n     * Removes a sound by alias.\n     * @method PIXI.sound#remove\n     * @param {String} alias The sound alias reference.\n     * @return {PIXI.sound} Instance for chaining.\n     */\n    public remove(alias: string): SoundLibrary\n    {\n        this.exists(alias, true);\n        this._sounds[alias].destroy();\n        delete this._sounds[alias];\n        return this;\n    }\n\n    /**\n     * Set the global volume for all sounds. To set per-sound volume see {@link PIXI.sound#volume}.\n     * @name PIXI.sound#volumeAll\n     * @type {number}\n     */\n    public get volumeAll(): number\n    {\n        return this._context.volume;\n    }\n    public set volumeAll(volume: number)\n    {\n        this._context.volume = volume;\n        this._context.refresh();\n    }\n\n    /**\n     * Set the global speed for all sounds. To set per-sound speed see {@link PIXI.sound#speed}.\n     * @name PIXI.sound#speedAll\n     * @type {number}\n     */\n    public get speedAll(): number\n    {\n        return this._context.speed;\n    }\n    public set speedAll(speed: number)\n    {\n        this._context.speed = speed;\n        this._context.refresh();\n    }\n\n    /**\n     * Toggle paused property for all sounds.\n     * @method PIXI.sound#togglePauseAll\n     * @return {boolean} `true` if all sounds are paused.\n     */\n    public togglePauseAll(): boolean\n    {\n        return this._context.togglePause();\n    }\n\n    /**\n     * Pauses any playing sounds.\n     * @method PIXI.sound#pauseAll\n     * @return {PIXI.sound} Instance for chaining.\n     */\n    public pauseAll(): SoundLibrary\n    {\n        this._context.paused = true;\n        this._context.refreshPaused();\n        return this;\n    }\n\n    /**\n     * Resumes any sounds.\n     * @method PIXI.sound#resumeAll\n     * @return {PIXI.sound} Instance for chaining.\n     */\n    public resumeAll(): SoundLibrary\n    {\n        this._context.paused = false;\n        this._context.refreshPaused();\n        return this;\n    }\n\n    /**\n     * Toggle muted property for all sounds.\n     * @method PIXI.sound#toggleMuteAll\n     * @return {boolean} `true` if all sounds are muted.\n     */\n    public toggleMuteAll(): boolean\n    {\n        return this._context.toggleMute();\n    }\n\n    /**\n     * Mutes all playing sounds.\n     * @method PIXI.sound#muteAll\n     * @return {PIXI.sound} Instance for chaining.\n     */\n    public muteAll(): SoundLibrary\n    {\n        this._context.muted = true;\n        this._context.refresh();\n        return this;\n    }\n\n    /**\n     * Unmutes all playing sounds.\n     * @method PIXI.sound#unmuteAll\n     * @return {PIXI.sound} Instance for chaining.\n     */\n    public unmuteAll(): SoundLibrary\n    {\n        this._context.muted = false;\n        this._context.refresh();\n        return this;\n    }\n\n    /**\n     * Stops and removes all sounds. They cannot be used after this.\n     * @method PIXI.sound#removeAll\n     * @return {PIXI.sound} Instance for chaining.\n     */\n    public removeAll(): SoundLibrary\n    {\n        for (const alias in this._sounds)\n        {\n            this._sounds[alias].destroy();\n            delete this._sounds[alias];\n        }\n        return this;\n    }\n\n    /**\n     * Stops all sounds.\n     * @method PIXI.sound#stopAll\n     * @return {PIXI.sound} Instance for chaining.\n     */\n    public stopAll(): SoundLibrary\n    {\n        for (const alias in this._sounds)\n        {\n            this._sounds[alias].stop();\n        }\n        return this;\n    }\n\n    /**\n     * Checks if a sound by alias exists.\n     * @method PIXI.sound#exists\n     * @param {String} alias Check for alias.\n     * @return {boolean} true if the sound exists.\n     */\n    public exists(alias: string, assert: boolean= false): boolean\n    {\n        const exists = !!this._sounds[alias];\n        if (assert)\n        {\n            // tslint:disable-next-line no-console\n            console.assert(exists, `No sound matching alias '${alias}'.`);\n        }\n        return exists;\n    }\n\n    /**\n     * Find a sound by alias.\n     * @method PIXI.sound#find\n     * @param {String} alias The sound alias reference.\n     * @return {PIXI.sound.Sound} Sound object.\n     */\n    public find(alias: string): Sound\n    {\n        this.exists(alias, true);\n        return this._sounds[alias];\n    }\n\n    /**\n     * Plays a sound.\n     * @method PIXI.sound#play\n     * @param {String} alias The sound alias reference.\n     * @param {String} sprite The alias of the sprite to play.\n     * @return {PIXI.sound.IMediaInstance|null} The sound instance, this cannot be reused\n     *         after it is done playing. Returns `null` if the sound has not yet loaded.\n     */\n\n    /**\n     * Plays a sound.\n     * @method PIXI.sound#play\n     * @param {String} alias The sound alias reference.\n     * @param {Object|Function} options The options or callback when done.\n     * @param {Function} [options.complete] When completed.\n     * @param {Function} [options.loaded] If not already preloaded, callback when finishes load.\n     * @param {number} [options.start=0] Start time offset.\n     * @param {number} [options.end] End time offset.\n     * @param {number} [options.speed] Override default speed, default to the Sound's speed setting.\n     * @param {boolean} [options.loop] Override default loop, default to the Sound's loop setting.\n     * @param {number} [options.wait] Delay in seconds before starting playback\n     * @return {PIXI.sound.IMediaInstance|Promise<PIXI.sound.IMediaInstance>} The sound instance,\n     *        this cannot be reused after it is done playing. Returns a Promise if the sound\n     *        has not yet loaded.\n     */\n    public play(\n        alias: string,\n        options?: PlayOptions | CompleteCallback | string): IMediaInstance | Promise<IMediaInstance>\n    {\n        return this.find(alias).play(options);\n    }\n\n    /**\n     * Stops a sound.\n     * @method PIXI.sound#stop\n     * @param {String} alias The sound alias reference.\n     * @return {PIXI.sound.Sound} Sound object.\n     */\n    public stop(alias: string): Sound\n    {\n        return this.find(alias).stop();\n    }\n\n    /**\n     * Pauses a sound.\n     * @method PIXI.sound#pause\n     * @param {String} alias The sound alias reference.\n     * @return {PIXI.sound.Sound} Sound object.\n     */\n    public pause(alias: string): Sound\n    {\n        return this.find(alias).pause();\n    }\n\n    /**\n     * Resumes a sound.\n     * @method PIXI.sound#resume\n     * @param {String} alias The sound alias reference.\n     * @return {PIXI.sound} Instance for chaining.\n     */\n    public resume(alias: string): Sound\n    {\n        return this.find(alias).resume();\n    }\n\n    /**\n     * Get or set the volume for a sound.\n     * @method PIXI.sound#volume\n     * @param {String} alias The sound alias reference.\n     * @param {number} [volume] Optional current volume to set.\n     * @return {number} The current volume.\n     */\n    public volume(alias: string, volume?: number): number\n    {\n        const sound = this.find(alias);\n        if (volume !== undefined) {\n            sound.volume = volume;\n        }\n        return sound.volume;\n    }\n\n    /**\n     * Get or set the speed for a sound.\n     * @method PIXI.sound#speed\n     * @param {String} alias The sound alias reference.\n     * @param {number} [speed] Optional current speed to set.\n     * @return {number} The current speed.\n     */\n    public speed(alias: string, speed?: number): number\n    {\n        const sound = this.find(alias);\n        if (speed !== undefined) {\n            sound.speed = speed;\n        }\n        return sound.speed;\n    }\n\n    /**\n     * Get the length of a sound in seconds.\n     * @method PIXI.sound#duration\n     * @param {String} alias The sound alias reference.\n     * @return {number} The current duration in seconds.\n     */\n    public duration(alias: string): number\n    {\n        return this.find(alias).duration;\n    }\n\n    /**\n     * Closes the sound library. This will release/destroy\n     * the AudioContext(s). Can be used safely if you want to\n     * initialize the sound library later. Use `init` method.\n     * @method PIXI.sound#close\n     * @return {PIXI.sound}\n     */\n    public close(): SoundLibrary\n    {\n        this.removeAll();\n        this._sounds = null;\n        if (this._webAudioContext)\n        {\n            this._webAudioContext.destroy();\n            this._webAudioContext = null;\n        }\n        if (this._htmlAudioContext)\n        {\n            this._htmlAudioContext.destroy();\n            this._htmlAudioContext = null;\n        }\n        this._context = null;\n        return this;\n    }\n}\n","import { getInstance } from \"../instance\";\n\n/**\n * Increment the alias for play once\n * @static\n * @private\n * @default 0\n */\nexport let PLAY_ID = 0;\n\n/**\n * Create a new \"Audio\" stream based on given audio path and project uri; returns the audio object.\n * @method PIXI.sound.utils.playOnce\n * @static\n * @param {String} fileName Full path of the file to play.\n * @param {Function} callback Callback when complete.\n * @return {string} New audio element alias.\n */\nexport function playOnce(url: string, callback?: (err?: Error) => void): string\n{\n    const alias = `alias${PLAY_ID++}`;\n\n    getInstance().add(alias, {\n        url,\n        preload: true,\n        autoPlay: true,\n        loaded: (err: Error) => {\n            if (err)\n            {\n                console.error(err);\n                getInstance().remove(alias);\n                if (callback)\n                {\n                    callback(err);\n                }\n            }\n        },\n        complete: () => {\n            getInstance().remove(alias);\n            if (callback)\n            {\n                callback(null);\n            }\n        },\n    });\n    return alias;\n}\n","import { Sound } from \"../Sound\";\nimport { WebAudioContext, WebAudioMedia } from \"../webaudio\";\n\nexport interface RenderOptions {\n    width?: number;\n    height?: number;\n    fill?: string | CanvasPattern | CanvasGradient;\n}\n\n/**\n * Render image as Texture. **Only supported with WebAudio**\n * @method PIXI.sound.utils.render\n * @param {PIXI.sound.Sound} sound Instance of sound to render\n * @param {Object} [options] Custom rendering options\n * @param {number} [options.width=512] Width of the render\n * @param {number} [options.height=128] Height of the render\n * @param {string|CanvasPattern|CanvasGradient} [options.fill='black'] Fill style for waveform\n * @return {PIXI.Texture} Result texture\n */\nexport function render(sound: Sound, options?: RenderOptions): PIXI.BaseTexture\n{\n    const canvas: HTMLCanvasElement = document.createElement(\"canvas\");\n\n    options = {\n        width: 512,\n        height: 128,\n        fill: \"black\", ...(options || {})};\n\n    canvas.width = options.width;\n    canvas.height = options.height;\n\n    const baseTexture = PIXI.BaseTexture.fromCanvas(canvas);\n\n    if (!(sound.media instanceof WebAudioMedia))\n    {\n        return baseTexture;\n    }\n\n    const media: WebAudioMedia = sound.media as WebAudioMedia;\n    // tslint:disable-next-line no-console\n    console.assert(!!media.buffer, \"No buffer found, load first\");\n\n    const context: CanvasRenderingContext2D = canvas.getContext(\"2d\");\n    context.fillStyle = options.fill;\n    const data: Float32Array = media.buffer.getChannelData(0);\n    const step: number = Math.ceil(data.length / options.width);\n    const amp: number = options.height / 2;\n\n    for (let i: number = 0; i < options.width; i++)\n    {\n        let min: number = 1.0;\n        let max: number = -1.0;\n\n        for (let j: number = 0; j < step; j++)\n        {\n            const datum: number = data[(i * step) + j];\n\n            if (datum < min)\n            {\n                min = datum;\n            }\n            if (datum > max)\n            {\n                max = datum;\n            }\n        }\n        context.fillRect(i, (1 + min) * amp, 1, Math.max(1, (max - min) * amp));\n    }\n    return baseTexture;\n}\n","import { Sound } from \"../Sound\";\nimport { WebAudioContext, WebAudioMedia } from \"../webaudio\";\n\n/**\n * Create a new sound for a sine wave-based tone.  **Only supported with WebAudio**\n * @method PIXI.sound.utils.sineTone\n * @param {number} [hertz=200] Frequency of sound.\n * @param {number} [seconds=1] Duration of sound in seconds.\n * @return {PIXI.sound.Sound} New sound.\n */\nexport function sineTone(hertz: number = 200, seconds: number = 1): Sound\n{\n    const sound = Sound.from({\n        singleInstance: true,\n    });\n\n    if (!(sound.media instanceof WebAudioMedia))\n    {\n        return sound;\n    }\n\n    const media = sound.media as WebAudioMedia;\n    const context = sound.context as WebAudioContext;\n\n    // set default value\n    const nChannels = 1;\n    const sampleRate = 48000;\n    const amplitude = 2;\n\n    // create the buffer\n    const buffer = context.audioContext.createBuffer(\n        nChannels,\n        seconds * sampleRate,\n        sampleRate,\n    );\n    const fArray = buffer.getChannelData(0);\n\n    // fill the buffer\n    for (let i = 0; i < fArray.length; i++)\n    {\n        const time  = i / buffer.sampleRate;\n        const angle = hertz * time * Math.PI;\n        fArray[i] = Math.sin(angle) * amplitude;\n    }\n\n    // set the buffer\n    media.buffer = buffer;\n    sound.isLoaded = true;\n    return sound;\n}\n","/**\n * Global namespace provided by the PixiJS project.\n * @namespace PIXI\n * @see https://github.com/pixijs/pixi.js\n */\nimport PromisePolyfill from \"promise-polyfill\";\nimport { Filterable } from \"./Filterable\";\nimport * as filters from \"./filters\";\nimport * as htmlaudio from \"./htmlaudio\";\nimport { getInstance, setInstance } from \"./instance\";\nimport { Loader, LoaderMiddleware } from \"./loader\";\nimport { Sound } from \"./Sound\";\nimport { SoundLibrary } from \"./SoundLibrary\";\nimport { SoundSprite } from \"./sprites\";\nimport * as utils from \"./utils\";\nimport * as webaudio from \"./webaudio\";\n\n// Create the singleton instance of library\nconst sound = setInstance(new SoundLibrary());\nconst win = window as any;\n\n// Expose to PIXI.sound to the window PIXI object\nconst PIXI_UNTYPED = PIXI as any;\n\n// Check for environments without promises\nif (typeof Promise === \"undefined\")\n{\n    win.Promise = PromisePolyfill;\n}\n\n// In some cases loaders can be not included\n// the the bundle for PixiJS, custom builds\nif (typeof PIXI.loaders !== \"undefined\")\n{\n    const majorVersion = parseInt(PIXI.VERSION.split(\".\")[0], 10);\n\n    // Hack for version 4.x of PixiJS to support in future loaders\n    // as well as the existing default shared loader\n    if (majorVersion === 4)\n    {\n        // Replace the PIXI.loaders.Loader class\n        // to support using the resolve loader middleware\n        PIXI.loaders.Loader = Loader;\n\n        // Install middleware on the default loader\n        LoaderMiddleware.add();\n        PIXI.loader.use(LoaderMiddleware.use);\n        PIXI.loader.pre(LoaderMiddleware.pre);\n    }\n    else if (majorVersion >= 5)\n    {\n        PIXI_UNTYPED.Loader.registerPlugin(LoaderMiddleware);\n    }\n}\n\n// Remove the global namespace created by rollup\n// makes it possible for users to opt-in to exposing\n// the library globally\nif (typeof win.__pixiSound === \"undefined\")\n{\n    delete win.__pixiSound;\n}\n\n// Check incase sound has already used\nif (!PIXI_UNTYPED.sound)\n{\n    Object.defineProperty(PIXI_UNTYPED, \"sound\",\n    {\n        get() { return sound; },\n    });\n\n    Object.defineProperties(sound,\n    {\n        Filterable: { get() { return Filterable; } },\n        filters: { get() { return filters; } },\n        htmlaudio: { get() { return htmlaudio; } },\n        Sound: { get() { return Sound; } },\n        SoundLibrary: { get() { return SoundLibrary; } },\n        SoundSprite: { get() { return SoundSprite; } },\n        utils: { get() { return utils; } },\n        webaudio: { get() { return webaudio; } },\n        sound: { get() { return sound; } },\n    });\n}\n\nexport default sound;\n"],"names":["setTimeoutFunc","setTimeout","noop","Promise","fn","this","TypeError","_state","_handled","_value","undefined","_deferreds","doResolve","handle","self","deferred","_immediateFn","cb","onFulfilled","onRejected","ret","e","reject","promise","resolve","push","newValue","then","finale","thisArg","apply","arguments","length","_unhandledRejectionFn","i","len","Handler","done","value","reason","ex","prototype","prom","constructor","callback","all","arr","args","Array","slice","call","remaining","res","val","race","values","setImmediate","err","console","input","output","_output","_input","Object","Filterable","_filters","filters","forEach","filter","disconnect","connect","prevFilter_1","_this","destination","source","init","Filter","instance","getInstance","WebAudioUtils","param","setValueAtTime","context","audioContext","currentTime","id","media","_super","_media","_paused","_muted","_elapsed","tslib_1.__extends","WebAudioInstance","_source","_internalStop","emit","_speed","speed","refresh","_update","_volume","volume","muted","_loop","loop","global","sound","parent","globalVolume","soundVolume","instanceVolume","setParamValue","_gain","gain","playbackRate","pausedReal","paused","_pausedReal","play","wait","_wait","start","Math","max","_duration","end","_end","options","_a","duration","buffer","_lastUpdate","_now","onended","_onComplete","bind","when","loopEnd","loopStart","_enabled","time","enabled","PIXI","ticker","shared","remove","_updateListener","add","_progress","refreshPaused","removeAllListeners","events","off","force","now","delta","progress","soundLength","on","stop","utils","EventEmitter","bufferSource","createBufferSource","createGain","analyser","createAnalyser","WebAudioNodes","_script","createScriptProcessor","BUFFER_SIZE","destroy","orig","script","bufferSize","WebAudioMedia","_nodes","_decode","url","_loadUrl","Error","request","XMLHttpRequest","open","responseType","onload","response","send","arrayBuffer","decode","isLoaded","autoPlayStart","win","window","ctx","WebAudioContext","AudioContext","compressor","createDynamicsCompressor","_ctx","_offlineCtx","OfflineAudioContext","sampleRate","_unlocked","state","_unlock","document","addEventListener","playEmptySound","removeEventListener","createBuffer","resume","webkitAudioContext","webkitOfflineAudioContext","close","suspend","decodeAudioData","message","f32","f64","f125","f250","f500","f1k","f2k","f4k","f8k","f16k","useLegacy","bands","f","EqualizerFilter","F32","type","F64","F125","F250","F500","F1K","F2K","F4K","F8K","F16K","map","band","node","createBiquadFilter","Q","frequency","bandsMap","getGain","setGain","amount","distortion","createWaveShaper","_distortion","DistortionFilter","_amount","x","curve","Float32Array","deg","PI","abs","oversample","pan","stereo","panner","createStereoPanner","createPanner","panningModel","_stereo","_panner","StereoFilter","_pan","setPosition","seconds","decay","reverse","_seconds","_clamp","_decay","_reverse","_rebuild","ReverbFilter","min","n","rate","impulse","impulseL","getChannelData","impulseR","random","pow","convolver","createConvolver","splitter","createChannelSplitter","merger","createChannelMerger","_merger","MonoFilter","lpf1","lpf2","hpf1","hpf2","HTMLAudioInstance","_playing","cloneNode","src","onplay","_onPlay","onpause","_onPause","pause","_waitTimer","clearTimeout","Date","_waitStart","_start","PADDING","onloadedmetadata","_onUpdate","HTMLAudioMedia","Audio","readyState","load","removeListeners","onLoad","onAbort","onError","error","code","instance_1","HTMLAudioContext","extensions","overrides","audio","formats","no","supported","m4a","oga","createElement","ext","canByExt","canPlayType","replace","canByType","freeze","FORMAT_PATTERN","resolveUrl","glob","test","match","exec","exts","split","resolved","extension","LoaderMiddleware","legacy","Resource","loaders","setExtensionXhrType","XHR_RESPONSE_TYPE","DEFAULT","setExtensionLoadType","LOAD_TYPE","AUDIO","BUFFER","XHR","resource","next","data","indexOf","name","loaded","preload","baseUrl","concurrency","use","pre","Loader","addPixiMiddleware","assign","SoundSprite","complete","_instances","_sprites","_autoPlayOptions","isPlaying","autoPlay","singleInstance","sprites","addSprites","_preload","Sound","ArrayBuffer","HTMLAudioElement","results","alias","sprite","_removeInstances","removeSprites","isPlayable","offset","_createInstance","once","_poolInstance","index","splice","_pool","pop","create","SoundLibrary","_webAudioContext","webaudio.WebAudioContext","_htmlAudioContext","htmlaudio.HTMLAudioContext","_sounds","_context","filtersAll","sourceOptions","_getOptions","from","_useLegacy","exists","togglePause","toggleMute","assert","find","removeAll","PLAY_ID","canvas","width","height","fill","baseTexture","BaseTexture","fromCanvas","getContext","fillStyle","step","ceil","amp","j","datum","fillRect","hertz","fArray","angle","sin","setInstance","PIXI_UNTYPED","PromisePolyfill","majorVersion","parseInt","VERSION","loader","registerPlugin","__pixiSound","defineProperty","get","defineProperties","htmlaudio","webaudio"],"mappings":"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"}